
test_atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000bda  00000c6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080014c  0080014c  00000cba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002272  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000982  00000000  00000000  000030d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe5  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00004a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000602  00000000  00000000  00004d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010db  00000000  00000000  00005376  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006451  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__vector_9>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 35       	cpi	r26, 0x5C	; 92
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 05 	call	0xaaa	; 0xaaa <main>
  9e:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_10>:
	echo_pulse_uS = (float)duty_cycle * 32768 / 65536;
	distance_cm = echo_pulse_uS * 0.034 / 2;
	return distance_cm;
}

ISR(TIMER1_CAPT_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	4f 93       	push	r20
  b2:	5f 93       	push	r21
  b4:	6f 93       	push	r22
  b6:	7f 93       	push	r23
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	if ((TCCR1B & (1<<ICES1)) == (1<<ICES1)){
  c4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  c8:	86 ff       	sbrs	r24, 6
  ca:	0f c0       	rjmp	.+30     	; 0xea <__vector_10+0x44>
		first_reading = ICR1;
  cc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
  d0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <first_reading>
  dc:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <first_reading+0x1>
  e0:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <first_reading+0x2>
  e4:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <first_reading+0x3>
  e8:	0e c0       	rjmp	.+28     	; 0x106 <__vector_10+0x60>
	}
	else{
		second_reading = ICR1;
  ea:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
  ee:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <second_reading>
  fa:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <second_reading+0x1>
  fe:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <second_reading+0x2>
 102:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <second_reading+0x3>
	}
	
	if (first_reading != 0 && second_reading != 0){
 106:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <first_reading>
 10a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <first_reading+0x1>
 10e:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <first_reading+0x2>
 112:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <first_reading+0x3>
 116:	89 2b       	or	r24, r25
 118:	8a 2b       	or	r24, r26
 11a:	8b 2b       	or	r24, r27
 11c:	c1 f1       	breq	.+112    	; 0x18e <__vector_10+0xe8>
 11e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <second_reading>
 122:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <second_reading+0x1>
 126:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <second_reading+0x2>
 12a:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <second_reading+0x3>
 12e:	89 2b       	or	r24, r25
 130:	8a 2b       	or	r24, r26
 132:	8b 2b       	or	r24, r27
 134:	61 f1       	breq	.+88     	; 0x18e <__vector_10+0xe8>
		duty_cycle = second_reading - first_reading;
 136:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <second_reading>
 13a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <second_reading+0x1>
 13e:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <second_reading+0x2>
 142:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <second_reading+0x3>
 146:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <first_reading>
 14a:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <first_reading+0x1>
 14e:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <first_reading+0x2>
 152:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <first_reading+0x3>
 156:	84 1b       	sub	r24, r20
 158:	95 0b       	sbc	r25, r21
 15a:	a6 0b       	sbc	r26, r22
 15c:	b7 0b       	sbc	r27, r23
 15e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
 162:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
 166:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <__data_end+0x2>
 16a:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <__data_end+0x3>
		first_reading = 0;
 16e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <first_reading>
 172:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <first_reading+0x1>
 176:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <first_reading+0x2>
 17a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <first_reading+0x3>
		second_reading = 0;
 17e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <second_reading>
 182:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <second_reading+0x1>
 186:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <second_reading+0x2>
 18a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <second_reading+0x3>
	}
	
	TCCR1B ^= (1<<ICES1); //toggle edge detection bit
 18e:	e1 e8       	ldi	r30, 0x81	; 129
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	90 81       	ld	r25, Z
 194:	80 e4       	ldi	r24, 0x40	; 64
 196:	89 27       	eor	r24, r25
 198:	80 83       	st	Z, r24
	TIFR1 = (1<<ICF1);//clear Input Capture Flag
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	86 bb       	out	0x16, r24	; 22
}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	7f 91       	pop	r23
 1ac:	6f 91       	pop	r22
 1ae:	5f 91       	pop	r21
 1b0:	4f 91       	pop	r20
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <pinChange>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
 1bc:	67 2b       	or	r22, r23
 1be:	09 f0       	breq	.+2      	; 0x1c2 <pinChange+0x6>
 1c0:	73 c0       	rjmp	.+230    	; 0x2a8 <pinChange+0xec>
 1c2:	8a 30       	cpi	r24, 0x0A	; 10
 1c4:	91 05       	cpc	r25, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0x10>
 1c8:	28 98       	cbi	0x05, 0	; 5
 1ca:	08 95       	ret
 1cc:	8b 30       	cpi	r24, 0x0B	; 11
 1ce:	91 05       	cpc	r25, r1
 1d0:	11 f4       	brne	.+4      	; 0x1d6 <pinChange+0x1a>
 1d2:	29 98       	cbi	0x05, 1	; 5
 1d4:	08 95       	ret
 1d6:	8c 30       	cpi	r24, 0x0C	; 12
 1d8:	91 05       	cpc	r25, r1
 1da:	11 f4       	brne	.+4      	; 0x1e0 <pinChange+0x24>
 1dc:	2a 98       	cbi	0x05, 2	; 5
 1de:	08 95       	ret
 1e0:	8d 30       	cpi	r24, 0x0D	; 13
 1e2:	91 05       	cpc	r25, r1
 1e4:	11 f4       	brne	.+4      	; 0x1ea <pinChange+0x2e>
 1e6:	2b 98       	cbi	0x05, 3	; 5
 1e8:	08 95       	ret
 1ea:	8e 30       	cpi	r24, 0x0E	; 14
 1ec:	91 05       	cpc	r25, r1
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <pinChange+0x38>
 1f0:	2c 98       	cbi	0x05, 4	; 5
 1f2:	08 95       	ret
 1f4:	8f 30       	cpi	r24, 0x0F	; 15
 1f6:	91 05       	cpc	r25, r1
 1f8:	11 f4       	brne	.+4      	; 0x1fe <pinChange+0x42>
 1fa:	2d 98       	cbi	0x05, 5	; 5
 1fc:	08 95       	ret
 1fe:	80 31       	cpi	r24, 0x10	; 16
 200:	91 05       	cpc	r25, r1
 202:	11 f4       	brne	.+4      	; 0x208 <pinChange+0x4c>
 204:	2e 98       	cbi	0x05, 6	; 5
 206:	08 95       	ret
 208:	81 31       	cpi	r24, 0x11	; 17
 20a:	91 05       	cpc	r25, r1
 20c:	11 f4       	brne	.+4      	; 0x212 <pinChange+0x56>
 20e:	2f 98       	cbi	0x05, 7	; 5
 210:	08 95       	ret
 212:	84 31       	cpi	r24, 0x14	; 20
 214:	91 05       	cpc	r25, r1
 216:	11 f4       	brne	.+4      	; 0x21c <pinChange+0x60>
 218:	40 98       	cbi	0x08, 0	; 8
 21a:	08 95       	ret
 21c:	85 31       	cpi	r24, 0x15	; 21
 21e:	91 05       	cpc	r25, r1
 220:	11 f4       	brne	.+4      	; 0x226 <pinChange+0x6a>
 222:	41 98       	cbi	0x08, 1	; 8
 224:	08 95       	ret
 226:	86 31       	cpi	r24, 0x16	; 22
 228:	91 05       	cpc	r25, r1
 22a:	11 f4       	brne	.+4      	; 0x230 <pinChange+0x74>
 22c:	42 98       	cbi	0x08, 2	; 8
 22e:	08 95       	ret
 230:	87 31       	cpi	r24, 0x17	; 23
 232:	91 05       	cpc	r25, r1
 234:	11 f4       	brne	.+4      	; 0x23a <pinChange+0x7e>
 236:	43 98       	cbi	0x08, 3	; 8
 238:	08 95       	ret
 23a:	88 31       	cpi	r24, 0x18	; 24
 23c:	91 05       	cpc	r25, r1
 23e:	11 f4       	brne	.+4      	; 0x244 <pinChange+0x88>
 240:	44 98       	cbi	0x08, 4	; 8
 242:	08 95       	ret
 244:	89 31       	cpi	r24, 0x19	; 25
 246:	91 05       	cpc	r25, r1
 248:	11 f4       	brne	.+4      	; 0x24e <pinChange+0x92>
 24a:	45 98       	cbi	0x08, 5	; 8
 24c:	08 95       	ret
 24e:	8a 31       	cpi	r24, 0x1A	; 26
 250:	91 05       	cpc	r25, r1
 252:	11 f4       	brne	.+4      	; 0x258 <pinChange+0x9c>
 254:	46 98       	cbi	0x08, 6	; 8
 256:	08 95       	ret
 258:	8e 31       	cpi	r24, 0x1E	; 30
 25a:	91 05       	cpc	r25, r1
 25c:	11 f4       	brne	.+4      	; 0x262 <pinChange+0xa6>
 25e:	58 98       	cbi	0x0b, 0	; 11
 260:	08 95       	ret
 262:	8f 31       	cpi	r24, 0x1F	; 31
 264:	91 05       	cpc	r25, r1
 266:	11 f4       	brne	.+4      	; 0x26c <pinChange+0xb0>
 268:	59 98       	cbi	0x0b, 1	; 11
 26a:	08 95       	ret
 26c:	80 32       	cpi	r24, 0x20	; 32
 26e:	91 05       	cpc	r25, r1
 270:	11 f4       	brne	.+4      	; 0x276 <pinChange+0xba>
 272:	5a 98       	cbi	0x0b, 2	; 11
 274:	08 95       	ret
 276:	81 32       	cpi	r24, 0x21	; 33
 278:	91 05       	cpc	r25, r1
 27a:	11 f4       	brne	.+4      	; 0x280 <pinChange+0xc4>
 27c:	5b 98       	cbi	0x0b, 3	; 11
 27e:	08 95       	ret
 280:	82 32       	cpi	r24, 0x22	; 34
 282:	91 05       	cpc	r25, r1
 284:	11 f4       	brne	.+4      	; 0x28a <pinChange+0xce>
 286:	5c 98       	cbi	0x0b, 4	; 11
 288:	08 95       	ret
 28a:	83 32       	cpi	r24, 0x23	; 35
 28c:	91 05       	cpc	r25, r1
 28e:	11 f4       	brne	.+4      	; 0x294 <pinChange+0xd8>
 290:	5d 98       	cbi	0x0b, 5	; 11
 292:	08 95       	ret
 294:	84 32       	cpi	r24, 0x24	; 36
 296:	91 05       	cpc	r25, r1
 298:	11 f4       	brne	.+4      	; 0x29e <pinChange+0xe2>
 29a:	5e 98       	cbi	0x0b, 6	; 11
 29c:	08 95       	ret
 29e:	85 97       	sbiw	r24, 0x25	; 37
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <pinChange+0xe8>
 2a2:	73 c0       	rjmp	.+230    	; 0x38a <pinChange+0x1ce>
 2a4:	5f 98       	cbi	0x0b, 7	; 11
 2a6:	08 95       	ret
 2a8:	8a 30       	cpi	r24, 0x0A	; 10
 2aa:	91 05       	cpc	r25, r1
 2ac:	11 f4       	brne	.+4      	; 0x2b2 <pinChange+0xf6>
 2ae:	28 9a       	sbi	0x05, 0	; 5
 2b0:	08 95       	ret
 2b2:	8b 30       	cpi	r24, 0x0B	; 11
 2b4:	91 05       	cpc	r25, r1
 2b6:	11 f4       	brne	.+4      	; 0x2bc <pinChange+0x100>
 2b8:	29 9a       	sbi	0x05, 1	; 5
 2ba:	08 95       	ret
 2bc:	8c 30       	cpi	r24, 0x0C	; 12
 2be:	91 05       	cpc	r25, r1
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <pinChange+0x10a>
 2c2:	2a 9a       	sbi	0x05, 2	; 5
 2c4:	08 95       	ret
 2c6:	8d 30       	cpi	r24, 0x0D	; 13
 2c8:	91 05       	cpc	r25, r1
 2ca:	11 f4       	brne	.+4      	; 0x2d0 <pinChange+0x114>
 2cc:	2b 9a       	sbi	0x05, 3	; 5
 2ce:	08 95       	ret
 2d0:	8e 30       	cpi	r24, 0x0E	; 14
 2d2:	91 05       	cpc	r25, r1
 2d4:	11 f4       	brne	.+4      	; 0x2da <pinChange+0x11e>
 2d6:	2c 9a       	sbi	0x05, 4	; 5
 2d8:	08 95       	ret
 2da:	8f 30       	cpi	r24, 0x0F	; 15
 2dc:	91 05       	cpc	r25, r1
 2de:	11 f4       	brne	.+4      	; 0x2e4 <pinChange+0x128>
 2e0:	2d 9a       	sbi	0x05, 5	; 5
 2e2:	08 95       	ret
 2e4:	80 31       	cpi	r24, 0x10	; 16
 2e6:	91 05       	cpc	r25, r1
 2e8:	11 f4       	brne	.+4      	; 0x2ee <pinChange+0x132>
 2ea:	2e 9a       	sbi	0x05, 6	; 5
 2ec:	08 95       	ret
 2ee:	81 31       	cpi	r24, 0x11	; 17
 2f0:	91 05       	cpc	r25, r1
 2f2:	11 f4       	brne	.+4      	; 0x2f8 <pinChange+0x13c>
 2f4:	2f 9a       	sbi	0x05, 7	; 5
 2f6:	08 95       	ret
 2f8:	84 31       	cpi	r24, 0x14	; 20
 2fa:	91 05       	cpc	r25, r1
 2fc:	11 f4       	brne	.+4      	; 0x302 <pinChange+0x146>
 2fe:	40 9a       	sbi	0x08, 0	; 8
 300:	08 95       	ret
 302:	85 31       	cpi	r24, 0x15	; 21
 304:	91 05       	cpc	r25, r1
 306:	11 f4       	brne	.+4      	; 0x30c <pinChange+0x150>
 308:	41 9a       	sbi	0x08, 1	; 8
 30a:	08 95       	ret
 30c:	86 31       	cpi	r24, 0x16	; 22
 30e:	91 05       	cpc	r25, r1
 310:	11 f4       	brne	.+4      	; 0x316 <pinChange+0x15a>
 312:	42 9a       	sbi	0x08, 2	; 8
 314:	08 95       	ret
 316:	87 31       	cpi	r24, 0x17	; 23
 318:	91 05       	cpc	r25, r1
 31a:	11 f4       	brne	.+4      	; 0x320 <pinChange+0x164>
 31c:	43 9a       	sbi	0x08, 3	; 8
 31e:	08 95       	ret
 320:	88 31       	cpi	r24, 0x18	; 24
 322:	91 05       	cpc	r25, r1
 324:	11 f4       	brne	.+4      	; 0x32a <pinChange+0x16e>
 326:	44 9a       	sbi	0x08, 4	; 8
 328:	08 95       	ret
 32a:	89 31       	cpi	r24, 0x19	; 25
 32c:	91 05       	cpc	r25, r1
 32e:	11 f4       	brne	.+4      	; 0x334 <pinChange+0x178>
 330:	45 9a       	sbi	0x08, 5	; 8
 332:	08 95       	ret
 334:	8a 31       	cpi	r24, 0x1A	; 26
 336:	91 05       	cpc	r25, r1
 338:	11 f4       	brne	.+4      	; 0x33e <pinChange+0x182>
 33a:	46 9a       	sbi	0x08, 6	; 8
 33c:	08 95       	ret
 33e:	8e 31       	cpi	r24, 0x1E	; 30
 340:	91 05       	cpc	r25, r1
 342:	11 f4       	brne	.+4      	; 0x348 <pinChange+0x18c>
 344:	58 9a       	sbi	0x0b, 0	; 11
 346:	08 95       	ret
 348:	8f 31       	cpi	r24, 0x1F	; 31
 34a:	91 05       	cpc	r25, r1
 34c:	11 f4       	brne	.+4      	; 0x352 <pinChange+0x196>
 34e:	59 9a       	sbi	0x0b, 1	; 11
 350:	08 95       	ret
 352:	80 32       	cpi	r24, 0x20	; 32
 354:	91 05       	cpc	r25, r1
 356:	11 f4       	brne	.+4      	; 0x35c <pinChange+0x1a0>
 358:	5a 9a       	sbi	0x0b, 2	; 11
 35a:	08 95       	ret
 35c:	81 32       	cpi	r24, 0x21	; 33
 35e:	91 05       	cpc	r25, r1
 360:	11 f4       	brne	.+4      	; 0x366 <pinChange+0x1aa>
 362:	5b 9a       	sbi	0x0b, 3	; 11
 364:	08 95       	ret
 366:	82 32       	cpi	r24, 0x22	; 34
 368:	91 05       	cpc	r25, r1
 36a:	11 f4       	brne	.+4      	; 0x370 <pinChange+0x1b4>
 36c:	5c 9a       	sbi	0x0b, 4	; 11
 36e:	08 95       	ret
 370:	83 32       	cpi	r24, 0x23	; 35
 372:	91 05       	cpc	r25, r1
 374:	11 f4       	brne	.+4      	; 0x37a <pinChange+0x1be>
 376:	5d 9a       	sbi	0x0b, 5	; 11
 378:	08 95       	ret
 37a:	84 32       	cpi	r24, 0x24	; 36
 37c:	91 05       	cpc	r25, r1
 37e:	11 f4       	brne	.+4      	; 0x384 <pinChange+0x1c8>
 380:	5e 9a       	sbi	0x0b, 6	; 11
 382:	08 95       	ret
 384:	85 97       	sbiw	r24, 0x25	; 37
 386:	09 f4       	brne	.+2      	; 0x38a <pinChange+0x1ce>
 388:	5f 9a       	sbi	0x0b, 7	; 11
 38a:	08 95       	ret

0000038c <Lcd8_Port>:
 38c:	cf 93       	push	r28
 38e:	c8 2f       	mov	r28, r24
 390:	80 ff       	sbrs	r24, 0
 392:	07 c0       	rjmp	.+14     	; 0x3a2 <Lcd8_Port+0x16>
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	89 e1       	ldi	r24, 0x19	; 25
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 3a0:	06 c0       	rjmp	.+12     	; 0x3ae <Lcd8_Port+0x22>
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	89 e1       	ldi	r24, 0x19	; 25
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 3ae:	c1 ff       	sbrs	r28, 1
 3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <Lcd8_Port+0x34>
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	88 e1       	ldi	r24, 0x18	; 24
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 3be:	06 c0       	rjmp	.+12     	; 0x3cc <Lcd8_Port+0x40>
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	88 e1       	ldi	r24, 0x18	; 24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 3cc:	c2 ff       	sbrs	r28, 2
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <Lcd8_Port+0x52>
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	8f e0       	ldi	r24, 0x0F	; 15
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 3dc:	06 c0       	rjmp	.+12     	; 0x3ea <Lcd8_Port+0x5e>
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	8f e0       	ldi	r24, 0x0F	; 15
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 3ea:	c3 ff       	sbrs	r28, 3
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <Lcd8_Port+0x70>
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	86 e1       	ldi	r24, 0x16	; 22
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 3fa:	06 c0       	rjmp	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	86 e1       	ldi	r24, 0x16	; 22
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 408:	c4 ff       	sbrs	r28, 4
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	82 e2       	ldi	r24, 0x22	; 34
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 418:	06 c0       	rjmp	.+12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	82 e2       	ldi	r24, 0x22	; 34
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 426:	c5 ff       	sbrs	r28, 5
 428:	07 c0       	rjmp	.+14     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	85 e1       	ldi	r24, 0x15	; 21
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 436:	06 c0       	rjmp	.+12     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	85 e1       	ldi	r24, 0x15	; 21
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 444:	c6 ff       	sbrs	r28, 6
 446:	07 c0       	rjmp	.+14     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	84 e1       	ldi	r24, 0x14	; 20
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 454:	06 c0       	rjmp	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	84 e1       	ldi	r24, 0x14	; 20
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 462:	cc 23       	and	r28, r28
 464:	3c f4       	brge	.+14     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	85 e2       	ldi	r24, 0x25	; 37
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 472:	06 c0       	rjmp	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	85 e2       	ldi	r24, 0x25	; 37
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <Lcd8_Cmd>:
 484:	cf 93       	push	r28
 486:	c8 2f       	mov	r28, r24
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	8a e0       	ldi	r24, 0x0A	; 10
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 494:	8c 2f       	mov	r24, r28
 496:	0e 94 c6 01 	call	0x38c	; 0x38c <Lcd8_Port>
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	87 e1       	ldi	r24, 0x17	; 23
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 4a6:	8f e9       	ldi	r24, 0x9F	; 159
 4a8:	9f e0       	ldi	r25, 0x0F	; 15
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <Lcd8_Cmd+0x26>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <Lcd8_Cmd+0x2c>
 4b0:	00 00       	nop
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	87 e1       	ldi	r24, 0x17	; 23
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 4be:	8f e9       	ldi	r24, 0x9F	; 159
 4c0:	9f e0       	ldi	r25, 0x0F	; 15
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <Lcd8_Cmd+0x3e>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <Lcd8_Cmd+0x44>
 4c8:	00 00       	nop
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <Lcd8_Init>:
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	8a e0       	ldi	r24, 0x0A	; 10
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	87 e1       	ldi	r24, 0x17	; 23
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 4e6:	2f ef       	ldi	r18, 0xFF	; 255
 4e8:	89 ef       	ldi	r24, 0xF9	; 249
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	21 50       	subi	r18, 0x01	; 1
 4ee:	80 40       	sbci	r24, 0x00	; 0
 4f0:	90 40       	sbci	r25, 0x00	; 0
 4f2:	e1 f7       	brne	.-8      	; 0x4ec <Lcd8_Init+0x1e>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <Lcd8_Init+0x28>
 4f6:	00 00       	nop
 4f8:	80 e3       	ldi	r24, 0x30	; 48
 4fa:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Cmd>
 4fe:	8f e1       	ldi	r24, 0x1F	; 31
 500:	9e e4       	ldi	r25, 0x4E	; 78
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <Lcd8_Init+0x34>
 506:	00 c0       	rjmp	.+0      	; 0x508 <Lcd8_Init+0x3a>
 508:	00 00       	nop
 50a:	80 e3       	ldi	r24, 0x30	; 48
 50c:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Cmd>
 510:	8f e9       	ldi	r24, 0x9F	; 159
 512:	9f e0       	ldi	r25, 0x0F	; 15
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <Lcd8_Init+0x46>
 518:	00 c0       	rjmp	.+0      	; 0x51a <Lcd8_Init+0x4c>
 51a:	00 00       	nop
 51c:	80 e3       	ldi	r24, 0x30	; 48
 51e:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Cmd>
 522:	8f e3       	ldi	r24, 0x3F	; 63
 524:	9c e9       	ldi	r25, 0x9C	; 156
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <Lcd8_Init+0x58>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <Lcd8_Init+0x5e>
 52c:	00 00       	nop
 52e:	88 e3       	ldi	r24, 0x38	; 56
 530:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Cmd>
 534:	8c e0       	ldi	r24, 0x0C	; 12
 536:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Cmd>
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Cmd>
 540:	86 e0       	ldi	r24, 0x06	; 6
 542:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Cmd>
 546:	08 95       	ret

00000548 <Lcd8_Write_Char>:
 548:	cf 93       	push	r28
 54a:	c8 2f       	mov	r28, r24
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	8a e0       	ldi	r24, 0x0A	; 10
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 558:	8c 2f       	mov	r24, r28
 55a:	0e 94 c6 01 	call	0x38c	; 0x38c <Lcd8_Port>
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	87 e1       	ldi	r24, 0x17	; 23
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 56a:	8f e9       	ldi	r24, 0x9F	; 159
 56c:	9f e0       	ldi	r25, 0x0F	; 15
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <Lcd8_Write_Char+0x26>
 572:	00 c0       	rjmp	.+0      	; 0x574 <Lcd8_Write_Char+0x2c>
 574:	00 00       	nop
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	87 e1       	ldi	r24, 0x17	; 23
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinChange>
 582:	8f e9       	ldi	r24, 0x9F	; 159
 584:	9f e0       	ldi	r25, 0x0F	; 15
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <Lcd8_Write_Char+0x3e>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <Lcd8_Write_Char+0x44>
 58c:	00 00       	nop
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <Lcd8_Write_String>:
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	ec 01       	movw	r28, r24
 598:	88 81       	ld	r24, Y
 59a:	88 23       	and	r24, r24
 59c:	31 f0       	breq	.+12     	; 0x5aa <Lcd8_Write_String+0x18>
 59e:	21 96       	adiw	r28, 0x01	; 1
 5a0:	0e 94 a4 02 	call	0x548	; 0x548 <Lcd8_Write_Char>
 5a4:	89 91       	ld	r24, Y+
 5a6:	81 11       	cpse	r24, r1
 5a8:	fb cf       	rjmp	.-10     	; 0x5a0 <Lcd8_Write_String+0xe>
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <initUSART>:
static volatile unsigned int pulseEnd = 0;	//volatile int , pulseEnd = 0.

//function to initialise USART
void initUSART()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8); //this sets the BAUD rate, must shift UBRROH 8 bits to the right
 5b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);	//sets lower 8 bits of UBRR0
 5b4:	87 e6       	ldi	r24, 0x67	; 103
 5b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<TXEN0); //enables send of data
 5ba:	88 e0       	ldi	r24, 0x08	; 8
 5bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (3<<UCSZ00); //it is set to 8 bit
 5c0:	86 e0       	ldi	r24, 0x06	; 6
 5c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 5c6:	08 95       	ret

000005c8 <init>:
}

//initialise values
void init()
{
	DDRB = 0xFF;	//set pins on PortB to output
 5c8:	8f ef       	ldi	r24, 0xFF	; 255
 5ca:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;	//set the pins to low initially, prevent floating
 5cc:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF;	//set pins as output, for LCD screen
 5ce:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;	//set as output pins for LCD screen
 5d0:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<echoPin);	//echoPin is input
 5d2:	52 98       	cbi	0x0a, 2	; 10
	PORTD = 0x00;	//set pins to low, prevent floating
 5d4:	1b b8       	out	0x0b, r1	; 11
	EIMSK |= (1<<INT0);		//interrupt INT0 enabled
 5d6:	e8 9a       	sbi	0x1d, 0	; 29
	TIMSK2 |= (1<<TOIE2);	//enable overflow interrupt on Timer 2
 5d8:	e0 e7       	ldi	r30, 0x70	; 112
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	81 60       	ori	r24, 0x01	; 1
 5e0:	80 83       	st	Z, r24
	EICRA |= (1<<ISC00); // interrupt on rising edge and falling edge
 5e2:	e9 e6       	ldi	r30, 0x69	; 105
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	81 60       	ori	r24, 0x01	; 1
 5ea:	80 83       	st	Z, r24
 5ec:	08 95       	ret

000005ee <initServo>:
}

//initialise servo
void initServo()
{
	DDRB |= (1<<PINB1); // Set pin 9 to output PWM
 5ee:	21 9a       	sbi	0x04, 1	; 4
	/* 1. Set Fast PWM mode 14: WGM11, WGM12, WGM13 to 1*/
	/* 2. Set pre-scale of 8 */
	/* 3. Set Fast PWM non-inverting mode */
	TCCR1A |= (1 << WGM11) | (1 << COM1A1);
 5f0:	e0 e8       	ldi	r30, 0x80	; 128
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	82 68       	ori	r24, 0x82	; 130
 5f8:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) |(1 << CS11);
 5fa:	e1 e8       	ldi	r30, 0x81	; 129
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	8a 61       	ori	r24, 0x1A	; 26
 602:	80 83       	st	Z, r24
	/* 4. Set ICR1: ICR1 is the top defining PWM period */
	ICR1 = 40000;
 604:	80 e4       	ldi	r24, 0x40	; 64
 606:	9c e9       	ldi	r25, 0x9C	; 156
 608:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 60c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 610:	08 95       	ret

00000612 <delayFunction_Timer0>:
}

//delay function using timer0
void delayFunction_Timer0(int a)	//8 bit timer
{
	OCR0A = a;	//counter limit
 612:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0x00;		//initialise Timer0 bits
 614:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<WGM01);		//Timer0, set to CTC mode
 616:	84 b5       	in	r24, 0x24	; 36
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);		//Timer0, CS00 = no pre-scaler
 61c:	85 b5       	in	r24, 0x25	; 37
 61e:	81 60       	ori	r24, 0x01	; 1
 620:	85 bd       	out	0x25, r24	; 37
	while ((TIFR0 & (1<<OCF0A)) == 0) {	//count up to OCF0 value
 622:	a9 9b       	sbis	0x15, 1	; 21
 624:	fe cf       	rjmp	.-4      	; 0x622 <delayFunction_Timer0+0x10>
	}
	TCCR0B = 0x00;		//stop clock when OCF1 value is reached
 626:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1<<OCF0A);		//set flag to 1
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	85 bb       	out	0x15, r24	; 21
 62c:	08 95       	ret

0000062e <signalPulse>:
}

//pulse 10uSecs to trigger input, this starts the ranging process
void signalPulse()
{
	PORTB |= (1<<trigPin);	//set trigPin high
 62e:	2b 9a       	sbi	0x05, 3	; 5
	delayFunction_Timer0(0xA4);	//0x9F = 159 = 15 uSecs
 630:	84 ea       	ldi	r24, 0xA4	; 164
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 09 03 	call	0x612	; 0x612 <delayFunction_Timer0>
	PORTB &= ~(1<<trigPin);		//set trigPin low again
 638:	2b 98       	cbi	0x05, 3	; 5
 63a:	08 95       	ret

0000063c <putStringUSART>:
}

//function to iterate over the message string
//cannot directly iterate over the string, so must use char pointer
void putStringUSART(char* stringPtr)	//take pointer to char as parameter
{
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
	while (*stringPtr != 0) {	//while the data the pointer points to is not null
 640:	fc 01       	movw	r30, r24
 642:	20 81       	ld	r18, Z
 644:	22 23       	and	r18, r18
 646:	69 f0       	breq	.+26     	; 0x662 <putStringUSART+0x26>
 648:	dc 01       	movw	r26, r24
 64a:	11 96       	adiw	r26, 0x01	; 1
		while (!(UCSR0A & (1<<UDRE0)));	//wait to receive data
 64c:	e0 ec       	ldi	r30, 0xC0	; 192
 64e:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *stringPtr;	//UDR0 = dereferenced stringPtr characters
 650:	c6 ec       	ldi	r28, 0xC6	; 198
 652:	d0 e0       	ldi	r29, 0x00	; 0
//function to iterate over the message string
//cannot directly iterate over the string, so must use char pointer
void putStringUSART(char* stringPtr)	//take pointer to char as parameter
{
	while (*stringPtr != 0) {	//while the data the pointer points to is not null
		while (!(UCSR0A & (1<<UDRE0)));	//wait to receive data
 654:	90 81       	ld	r25, Z
 656:	95 ff       	sbrs	r25, 5
 658:	fd cf       	rjmp	.-6      	; 0x654 <putStringUSART+0x18>
		UDR0 = *stringPtr;	//UDR0 = dereferenced stringPtr characters
 65a:	28 83       	st	Y, r18

//function to iterate over the message string
//cannot directly iterate over the string, so must use char pointer
void putStringUSART(char* stringPtr)	//take pointer to char as parameter
{
	while (*stringPtr != 0) {	//while the data the pointer points to is not null
 65c:	2d 91       	ld	r18, X+
 65e:	21 11       	cpse	r18, r1
 660:	f9 cf       	rjmp	.-14     	; 0x654 <putStringUSART+0x18>
		while (!(UCSR0A & (1<<UDRE0)));	//wait to receive data
		UDR0 = *stringPtr;	//UDR0 = dereferenced stringPtr characters
		stringPtr++;	//advance stringPtr by 1
	}
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <distanceBar>:
	//this sets how many cm is represented by each char on LCD screen
	//changing this value is possible up to a max value of 17.
	//(17x16 = 272cm range, max is 275cm thus cannot go beyond 17)
	int cmPerChar = 2;
	
	if (pulseEnd > 0 && pulseEnd <= cmPerChar) {
 668:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 66c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 670:	89 2b       	or	r24, r25
 672:	79 f0       	breq	.+30     	; 0x692 <distanceBar+0x2a>
 674:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 678:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 67c:	03 97       	sbiw	r24, 0x03	; 3
 67e:	48 f4       	brcc	.+18     	; 0x692 <distanceBar+0x2a>
		Lcd8_Write_String("+");
 680:	84 e2       	ldi	r24, 0x24	; 36
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	91 e0       	ldi	r25, 0x01	; 1
 68c:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 690:	08 95       	ret
	}
	
	else if (pulseEnd > cmPerChar && pulseEnd <= 2*cmPerChar) {
 692:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 696:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 69a:	03 97       	sbiw	r24, 0x03	; 3
 69c:	78 f0       	brcs	.+30     	; 0x6bc <distanceBar+0x54>
 69e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 6a2:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 6a6:	05 97       	sbiw	r24, 0x05	; 5
 6a8:	48 f4       	brcc	.+18     	; 0x6bc <distanceBar+0x54>
		Lcd8_Write_String("++");
 6aa:	83 e2       	ldi	r24, 0x23	; 35
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 6ba:	08 95       	ret
	}
	
	else if (pulseEnd > 2*cmPerChar && pulseEnd <= 3*cmPerChar) {
 6bc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 6c0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 6c4:	05 97       	sbiw	r24, 0x05	; 5
 6c6:	78 f0       	brcs	.+30     	; 0x6e6 <distanceBar+0x7e>
 6c8:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 6cc:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 6d0:	07 97       	sbiw	r24, 0x07	; 7
 6d2:	48 f4       	brcc	.+18     	; 0x6e6 <distanceBar+0x7e>
		Lcd8_Write_String("+++");
 6d4:	82 e2       	ldi	r24, 0x22	; 34
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 6e4:	08 95       	ret
	}
	
	else if (pulseEnd > 3*cmPerChar && pulseEnd <= 4*cmPerChar) {
 6e6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 6ea:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 6ee:	07 97       	sbiw	r24, 0x07	; 7
 6f0:	78 f0       	brcs	.+30     	; 0x710 <distanceBar+0xa8>
 6f2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 6f6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 6fa:	09 97       	sbiw	r24, 0x09	; 9
 6fc:	48 f4       	brcc	.+18     	; 0x710 <distanceBar+0xa8>
		Lcd8_Write_String("++++");
 6fe:	81 e2       	ldi	r24, 0x21	; 33
 700:	91 e0       	ldi	r25, 0x01	; 1
 702:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 70e:	08 95       	ret
	}
	
	else if (pulseEnd > 4*cmPerChar && pulseEnd <= 5*cmPerChar) {
 710:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 714:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 718:	09 97       	sbiw	r24, 0x09	; 9
 71a:	78 f0       	brcs	.+30     	; 0x73a <distanceBar+0xd2>
 71c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 720:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 724:	0b 97       	sbiw	r24, 0x0b	; 11
 726:	48 f4       	brcc	.+18     	; 0x73a <distanceBar+0xd2>
		Lcd8_Write_String("+++++");
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	91 e0       	ldi	r25, 0x01	; 1
 72c:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 738:	08 95       	ret
	}
	
	else if (pulseEnd > 5*cmPerChar && pulseEnd <= 6*cmPerChar) {
 73a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 73e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 742:	0b 97       	sbiw	r24, 0x0b	; 11
 744:	78 f0       	brcs	.+30     	; 0x764 <distanceBar+0xfc>
 746:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 74a:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 74e:	0d 97       	sbiw	r24, 0x0d	; 13
 750:	48 f4       	brcc	.+18     	; 0x764 <distanceBar+0xfc>
		Lcd8_Write_String("++++++");
 752:	8f e1       	ldi	r24, 0x1F	; 31
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 762:	08 95       	ret
	}
	
	else if (pulseEnd > 6*cmPerChar && pulseEnd <= 7*cmPerChar) {
 764:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 768:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 76c:	0d 97       	sbiw	r24, 0x0d	; 13
 76e:	78 f0       	brcs	.+30     	; 0x78e <distanceBar+0x126>
 770:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 774:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 778:	0f 97       	sbiw	r24, 0x0f	; 15
 77a:	48 f4       	brcc	.+18     	; 0x78e <distanceBar+0x126>
		Lcd8_Write_String("+++++++");
 77c:	8e e1       	ldi	r24, 0x1E	; 30
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 78c:	08 95       	ret
	}
	
	else if (pulseEnd > 7*cmPerChar && pulseEnd <= 8*cmPerChar) {
 78e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 792:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 796:	0f 97       	sbiw	r24, 0x0f	; 15
 798:	78 f0       	brcs	.+30     	; 0x7b8 <distanceBar+0x150>
 79a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 79e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 7a2:	41 97       	sbiw	r24, 0x11	; 17
 7a4:	48 f4       	brcc	.+18     	; 0x7b8 <distanceBar+0x150>
		Lcd8_Write_String("++++++++");
 7a6:	8d e1       	ldi	r24, 0x1D	; 29
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	91 e0       	ldi	r25, 0x01	; 1
 7b2:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 7b6:	08 95       	ret
	}
	
	else if (pulseEnd > 8*cmPerChar && pulseEnd <= 9*cmPerChar) {
 7b8:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 7bc:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 7c0:	41 97       	sbiw	r24, 0x11	; 17
 7c2:	78 f0       	brcs	.+30     	; 0x7e2 <distanceBar+0x17a>
 7c4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 7c8:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 7cc:	43 97       	sbiw	r24, 0x13	; 19
 7ce:	48 f4       	brcc	.+18     	; 0x7e2 <distanceBar+0x17a>
		Lcd8_Write_String("+++++++++");
 7d0:	8c e1       	ldi	r24, 0x1C	; 28
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	91 e0       	ldi	r25, 0x01	; 1
 7dc:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 7e0:	08 95       	ret
	}
	
	else if (pulseEnd > 9*cmPerChar && pulseEnd <= 10*cmPerChar) {
 7e2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 7e6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 7ea:	43 97       	sbiw	r24, 0x13	; 19
 7ec:	78 f0       	brcs	.+30     	; 0x80c <distanceBar+0x1a4>
 7ee:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 7f2:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 7f6:	45 97       	sbiw	r24, 0x15	; 21
 7f8:	48 f4       	brcc	.+18     	; 0x80c <distanceBar+0x1a4>
		Lcd8_Write_String("++++++++++");
 7fa:	8b e1       	ldi	r24, 0x1B	; 27
 7fc:	91 e0       	ldi	r25, 0x01	; 1
 7fe:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	91 e0       	ldi	r25, 0x01	; 1
 806:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 80a:	08 95       	ret
	}
	
	else if (pulseEnd > 10*cmPerChar && pulseEnd <= 11*cmPerChar) {
 80c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 810:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 814:	45 97       	sbiw	r24, 0x15	; 21
 816:	78 f0       	brcs	.+30     	; 0x836 <distanceBar+0x1ce>
 818:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 81c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 820:	47 97       	sbiw	r24, 0x17	; 23
 822:	48 f4       	brcc	.+18     	; 0x836 <distanceBar+0x1ce>
		Lcd8_Write_String("+++++++++++");
 824:	8a e1       	ldi	r24, 0x1A	; 26
 826:	91 e0       	ldi	r25, 0x01	; 1
 828:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 834:	08 95       	ret
	}
	
	else if (pulseEnd > 11*cmPerChar && pulseEnd <= 12*cmPerChar) {
 836:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 83a:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 83e:	47 97       	sbiw	r24, 0x17	; 23
 840:	78 f0       	brcs	.+30     	; 0x860 <distanceBar+0x1f8>
 842:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 846:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 84a:	49 97       	sbiw	r24, 0x19	; 25
 84c:	48 f4       	brcc	.+18     	; 0x860 <distanceBar+0x1f8>
		Lcd8_Write_String("++++++++++++");
 84e:	89 e1       	ldi	r24, 0x19	; 25
 850:	91 e0       	ldi	r25, 0x01	; 1
 852:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	91 e0       	ldi	r25, 0x01	; 1
 85a:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 85e:	08 95       	ret
	}
	
	else if (pulseEnd > 12*cmPerChar && pulseEnd <= 13*cmPerChar) {
 860:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 864:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 868:	49 97       	sbiw	r24, 0x19	; 25
 86a:	78 f0       	brcs	.+30     	; 0x88a <distanceBar+0x222>
 86c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 870:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 874:	4b 97       	sbiw	r24, 0x1b	; 27
 876:	48 f4       	brcc	.+18     	; 0x88a <distanceBar+0x222>
		Lcd8_Write_String("+++++++++++++");
 878:	88 e1       	ldi	r24, 0x18	; 24
 87a:	91 e0       	ldi	r25, 0x01	; 1
 87c:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	91 e0       	ldi	r25, 0x01	; 1
 884:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 888:	08 95       	ret
	}
	
	else if (pulseEnd > 14*cmPerChar && pulseEnd <= 15*cmPerChar) {
 88a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 88e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 892:	4d 97       	sbiw	r24, 0x1d	; 29
 894:	78 f0       	brcs	.+30     	; 0x8b4 <distanceBar+0x24c>
 896:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 89a:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 89e:	4f 97       	sbiw	r24, 0x1f	; 31
 8a0:	48 f4       	brcc	.+18     	; 0x8b4 <distanceBar+0x24c>
		Lcd8_Write_String("++++++++++++++");
 8a2:	87 e1       	ldi	r24, 0x17	; 23
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 8b2:	08 95       	ret
	}
	
	else if (pulseEnd > 16*cmPerChar && pulseEnd <= 17*cmPerChar) {
 8b4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 8b8:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 8bc:	81 97       	sbiw	r24, 0x21	; 33
 8be:	78 f0       	brcs	.+30     	; 0x8de <distanceBar+0x276>
 8c0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pulseEnd>
 8c4:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pulseEnd+0x1>
 8c8:	83 97       	sbiw	r24, 0x23	; 35
 8ca:	48 f4       	brcc	.+18     	; 0x8de <distanceBar+0x276>
		Lcd8_Write_String("+++++++++++++++");
 8cc:	86 e1       	ldi	r24, 0x16	; 22
 8ce:	91 e0       	ldi	r25, 0x01	; 1
 8d0:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		Lcd8_Write_String("                     ");
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	91 e0       	ldi	r25, 0x01	; 1
 8d8:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 8dc:	08 95       	ret
	}
	
	else {
		Lcd8_Write_String("                     ");
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	91 e0       	ldi	r25, 0x01	; 1
 8e2:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
 8e6:	08 95       	ret

000008e8 <angleLoop>:
//servo motor  can turn 180 degrees.
//so we only need to measure angle from (0+15) <= angle <= (180-15)
//However, servo is unreliable at either extreme (close to 0 and 180 degrees)
//So, this servo will loop between 50 and 165 degrees
void angleLoop()
{
 8e8:	af 92       	push	r10
 8ea:	bf 92       	push	r11
 8ec:	cf 92       	push	r12
 8ee:	df 92       	push	r13
 8f0:	ef 92       	push	r14
 8f2:	ff 92       	push	r15
 8f4:	0f 93       	push	r16
 8f6:	1f 93       	push	r17
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
 900:	2a 97       	sbiw	r28, 0x0a	; 10
 902:	0f b6       	in	r0, 0x3f	; 63
 904:	f8 94       	cli
 906:	de bf       	out	0x3e, r29	; 62
 908:	0f be       	out	0x3f, r0	; 63
 90a:	cd bf       	out	0x3d, r28	; 61
 90c:	0f 2e       	mov	r0, r31
 90e:	f2 ee       	ldi	r31, 0xE2	; 226
 910:	ef 2e       	mov	r14, r31
 912:	f4 e0       	ldi	r31, 0x04	; 4
 914:	ff 2e       	mov	r15, r31
 916:	f0 2d       	mov	r31, r0
	int16_t pulseRange = 0;	//counter is 0 initially
	char pulseString[5];		//char array, used for sending string to USART
	char angleString[5];		//char array, for sending angle to USART
	
	//measure from 50 to 165 degrees
	for (int angle = 50; angle <= 165; angle++) {
 918:	02 e3       	ldi	r16, 0x32	; 50
 91a:	10 e0       	ldi	r17, 0x00	; 0
		
		OCR1A = angle*25;	//OCR1A scales with the angle, multiplied by a constant
 91c:	0f 2e       	mov	r0, r31
 91e:	f8 e8       	ldi	r31, 0x88	; 136
 920:	af 2e       	mov	r10, r31
 922:	b1 2c       	mov	r11, r1
 924:	f0 2d       	mov	r31, r0
 926:	f5 01       	movw	r30, r10
 928:	f1 82       	std	Z+1, r15	; 0x01
 92a:	e0 82       	st	Z, r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 92c:	ff ef       	ldi	r31, 0xFF	; 255
 92e:	26 e7       	ldi	r18, 0x76	; 118
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	f1 50       	subi	r31, 0x01	; 1
 934:	20 40       	sbci	r18, 0x00	; 0
 936:	80 40       	sbci	r24, 0x00	; 0
 938:	e1 f7       	brne	.-8      	; 0x932 <__stack+0x33>
 93a:	00 c0       	rjmp	.+0      	; 0x93c <__stack+0x3d>
 93c:	00 00       	nop
		_delay_ms(30);	//30ms delay, prevents de-bouncing
		signalPulse();		//call signal pulse
 93e:	0e 94 17 03 	call	0x62e	; 0x62e <signalPulse>
		pulseRange = pulseEnd;	//pulseRange takes the value of TCNT2
 942:	c0 90 58 01 	lds	r12, 0x0158	; 0x800158 <pulseEnd>
 946:	d0 90 59 01 	lds	r13, 0x0159	; 0x800159 <pulseEnd+0x1>
		putStringUSART("Distance: ");	//print the distance to data visualizer
 94a:	86 e2       	ldi	r24, 0x26	; 38
 94c:	91 e0       	ldi	r25, 0x01	; 1
 94e:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 952:	4a e0       	ldi	r20, 0x0A	; 10
 954:	be 01       	movw	r22, r28
 956:	6f 5f       	subi	r22, 0xFF	; 255
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	c6 01       	movw	r24, r12
 95c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__itoa_ncheck>
		itoa(pulseRange, pulseString, 10);		//convert int to string
		putStringUSART(pulseString);		//print string to data visualizer
 960:	ce 01       	movw	r24, r28
 962:	01 96       	adiw	r24, 0x01	; 1
 964:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
		putStringUSART(" cm, ");	//print to data visualizer, new line after
 968:	81 e3       	ldi	r24, 0x31	; 49
 96a:	91 e0       	ldi	r25, 0x01	; 1
 96c:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
		putStringUSART("Angle: ");	//print the distance to data visualizer
 970:	87 e3       	ldi	r24, 0x37	; 55
 972:	91 e0       	ldi	r25, 0x01	; 1
 974:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
 978:	4a e0       	ldi	r20, 0x0A	; 10
 97a:	be 01       	movw	r22, r28
 97c:	6a 5f       	subi	r22, 0xFA	; 250
 97e:	7f 4f       	sbci	r23, 0xFF	; 255
 980:	c8 01       	movw	r24, r16
 982:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__itoa_ncheck>
		itoa(angle, angleString, 10);		//convert int to string
		putStringUSART(angleString);	//print the angle to data visualiser
 986:	ce 01       	movw	r24, r28
 988:	06 96       	adiw	r24, 0x06	; 6
 98a:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
		putStringUSART(".\n");	//then do new line
 98e:	8f e3       	ldi	r24, 0x3F	; 63
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
 996:	ef e9       	ldi	r30, 0x9F	; 159
 998:	ff e0       	ldi	r31, 0x0F	; 15
 99a:	31 97       	sbiw	r30, 0x01	; 1
 99c:	f1 f7       	brne	.-4      	; 0x99a <__stack+0x9b>
 99e:	00 c0       	rjmp	.+0      	; 0x9a0 <__stack+0xa1>
 9a0:	00 00       	nop
void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
	Lcd8_Cmd(0x80 + b);
	else if(a == 2)
	Lcd8_Cmd(0xC0 + b);
 9a2:	80 ec       	ldi	r24, 0xC0	; 192
 9a4:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Cmd>
		_delay_ms(1);	//1ms delay to prevent de-bouncing
		Lcd8_Set_Cursor(2,0);	//set new position of cursor
		distanceBar();	//go to distanceBar()
 9a8:	0e 94 34 03 	call	0x668	; 0x668 <distanceBar>
 9ac:	8f e9       	ldi	r24, 0x9F	; 159
 9ae:	9f e0       	ldi	r25, 0x0F	; 15
 9b0:	01 97       	sbiw	r24, 0x01	; 1
 9b2:	f1 f7       	brne	.-4      	; 0x9b0 <__stack+0xb1>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <__stack+0xb7>
 9b6:	00 00       	nop
	int16_t pulseRange = 0;	//counter is 0 initially
	char pulseString[5];		//char array, used for sending string to USART
	char angleString[5];		//char array, for sending angle to USART
	
	//measure from 50 to 165 degrees
	for (int angle = 50; angle <= 165; angle++) {
 9b8:	0f 5f       	subi	r16, 0xFF	; 255
 9ba:	1f 4f       	sbci	r17, 0xFF	; 255
 9bc:	99 e1       	ldi	r25, 0x19	; 25
 9be:	e9 0e       	add	r14, r25
 9c0:	f1 1c       	adc	r15, r1
 9c2:	06 3a       	cpi	r16, 0xA6	; 166
 9c4:	11 05       	cpc	r17, r1
 9c6:	09 f0       	breq	.+2      	; 0x9ca <__stack+0xcb>
 9c8:	ae cf       	rjmp	.-164    	; 0x926 <__stack+0x27>
 9ca:	0f 2e       	mov	r0, r31
 9cc:	fd e1       	ldi	r31, 0x1D	; 29
 9ce:	ef 2e       	mov	r14, r31
 9d0:	f0 e1       	ldi	r31, 0x10	; 16
 9d2:	ff 2e       	mov	r15, r31
 9d4:	f0 2d       	mov	r31, r0
 9d6:	05 ea       	ldi	r16, 0xA5	; 165
 9d8:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(1);	//1ms delay to prevent de-bouncing
	}
	
	//measure from 165 back to 50 degrees
	for (int angle = 165; angle >= 50 ; angle--) {
		OCR1A = angle*25;		//OCR1A scales with the angle, multiplied by a constant
 9da:	0f 2e       	mov	r0, r31
 9dc:	f8 e8       	ldi	r31, 0x88	; 136
 9de:	af 2e       	mov	r10, r31
 9e0:	b1 2c       	mov	r11, r1
 9e2:	f0 2d       	mov	r31, r0
 9e4:	f5 01       	movw	r30, r10
 9e6:	f1 82       	std	Z+1, r15	; 0x01
 9e8:	e0 82       	st	Z, r14
 9ea:	ff ef       	ldi	r31, 0xFF	; 255
 9ec:	26 e7       	ldi	r18, 0x76	; 118
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	f1 50       	subi	r31, 0x01	; 1
 9f2:	20 40       	sbci	r18, 0x00	; 0
 9f4:	80 40       	sbci	r24, 0x00	; 0
 9f6:	e1 f7       	brne	.-8      	; 0x9f0 <__stack+0xf1>
 9f8:	00 c0       	rjmp	.+0      	; 0x9fa <__stack+0xfb>
 9fa:	00 00       	nop
		_delay_ms(30);		//30ms delay, prevents de-bouncing
		signalPulse();		//call signal pulse
 9fc:	0e 94 17 03 	call	0x62e	; 0x62e <signalPulse>
		pulseRange = pulseEnd;		//pulseRange takes the value of TCNT2
 a00:	c0 90 58 01 	lds	r12, 0x0158	; 0x800158 <pulseEnd>
 a04:	d0 90 59 01 	lds	r13, 0x0159	; 0x800159 <pulseEnd+0x1>
		putStringUSART("Distance: ");	//print the distance to data visualizer
 a08:	86 e2       	ldi	r24, 0x26	; 38
 a0a:	91 e0       	ldi	r25, 0x01	; 1
 a0c:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
 a10:	4a e0       	ldi	r20, 0x0A	; 10
 a12:	be 01       	movw	r22, r28
 a14:	6f 5f       	subi	r22, 0xFF	; 255
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	c6 01       	movw	r24, r12
 a1a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__itoa_ncheck>
		itoa(pulseRange, pulseString, 10);		//convert int to string
		putStringUSART(pulseString);		//print string to data visualizer
 a1e:	ce 01       	movw	r24, r28
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
		putStringUSART(" cm, ");	//print to data visualizer, new line after
 a26:	81 e3       	ldi	r24, 0x31	; 49
 a28:	91 e0       	ldi	r25, 0x01	; 1
 a2a:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
		putStringUSART("Angle: ");	//print the distance to data visualizer
 a2e:	87 e3       	ldi	r24, 0x37	; 55
 a30:	91 e0       	ldi	r25, 0x01	; 1
 a32:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
 a36:	4a e0       	ldi	r20, 0x0A	; 10
 a38:	be 01       	movw	r22, r28
 a3a:	6a 5f       	subi	r22, 0xFA	; 250
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255
 a3e:	c8 01       	movw	r24, r16
 a40:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__itoa_ncheck>
		itoa(angle, angleString, 10);		//convert int to string
		putStringUSART(angleString);	//print the angle to data visualiser
 a44:	ce 01       	movw	r24, r28
 a46:	06 96       	adiw	r24, 0x06	; 6
 a48:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
		putStringUSART(".\n");		//then do new line
 a4c:	8f e3       	ldi	r24, 0x3F	; 63
 a4e:	91 e0       	ldi	r25, 0x01	; 1
 a50:	0e 94 1e 03 	call	0x63c	; 0x63c <putStringUSART>
 a54:	ef e9       	ldi	r30, 0x9F	; 159
 a56:	ff e0       	ldi	r31, 0x0F	; 15
 a58:	31 97       	sbiw	r30, 0x01	; 1
 a5a:	f1 f7       	brne	.-4      	; 0xa58 <__stack+0x159>
 a5c:	00 c0       	rjmp	.+0      	; 0xa5e <__stack+0x15f>
 a5e:	00 00       	nop
 a60:	80 ec       	ldi	r24, 0xC0	; 192
 a62:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Cmd>
		_delay_ms(1);			//1ms delay to prevent de-bouncing
		Lcd8_Set_Cursor(2,0);	//set new position of cursor
		distanceBar();		//go to distanceBar()
 a66:	0e 94 34 03 	call	0x668	; 0x668 <distanceBar>
 a6a:	8f e9       	ldi	r24, 0x9F	; 159
 a6c:	9f e0       	ldi	r25, 0x0F	; 15
 a6e:	01 97       	sbiw	r24, 0x01	; 1
 a70:	f1 f7       	brne	.-4      	; 0xa6e <__stack+0x16f>
 a72:	00 c0       	rjmp	.+0      	; 0xa74 <__stack+0x175>
 a74:	00 00       	nop
		distanceBar();	//go to distanceBar()
		_delay_ms(1);	//1ms delay to prevent de-bouncing
	}
	
	//measure from 165 back to 50 degrees
	for (int angle = 165; angle >= 50 ; angle--) {
 a76:	01 50       	subi	r16, 0x01	; 1
 a78:	11 09       	sbc	r17, r1
 a7a:	99 e1       	ldi	r25, 0x19	; 25
 a7c:	e9 1a       	sub	r14, r25
 a7e:	f1 08       	sbc	r15, r1
 a80:	01 33       	cpi	r16, 0x31	; 49
 a82:	11 05       	cpc	r17, r1
 a84:	09 f0       	breq	.+2      	; 0xa88 <__stack+0x189>
 a86:	ae cf       	rjmp	.-164    	; 0x9e4 <__stack+0xe5>
		_delay_ms(1);			//1ms delay to prevent de-bouncing
		Lcd8_Set_Cursor(2,0);	//set new position of cursor
		distanceBar();		//go to distanceBar()
		_delay_ms(1);		//1ms delay to prevent de-bouncing
	}
}
 a88:	2a 96       	adiw	r28, 0x0a	; 10
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	f8 94       	cli
 a8e:	de bf       	out	0x3e, r29	; 62
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	cd bf       	out	0x3d, r28	; 61
 a94:	df 91       	pop	r29
 a96:	cf 91       	pop	r28
 a98:	1f 91       	pop	r17
 a9a:	0f 91       	pop	r16
 a9c:	ff 90       	pop	r15
 a9e:	ef 90       	pop	r14
 aa0:	df 90       	pop	r13
 aa2:	cf 90       	pop	r12
 aa4:	bf 90       	pop	r11
 aa6:	af 90       	pop	r10
 aa8:	08 95       	ret

00000aaa <main>:

int main()
{
	initUSART(); //USART initialization
 aaa:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <initUSART>
	init();	//output initialization
 aae:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <init>
	initServo();
 ab2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <initServo>
	Lcd8_Init();	//lcd8 initialisation
 ab6:	0e 94 67 02 	call	0x4ce	; 0x4ce <Lcd8_Init>
 aba:	2f ef       	ldi	r18, 0xFF	; 255
 abc:	80 e7       	ldi	r24, 0x70	; 112
 abe:	92 e0       	ldi	r25, 0x02	; 2
 ac0:	21 50       	subi	r18, 0x01	; 1
 ac2:	80 40       	sbci	r24, 0x00	; 0
 ac4:	90 40       	sbci	r25, 0x00	; 0
 ac6:	e1 f7       	brne	.-8      	; 0xac0 <main+0x16>
 ac8:	00 c0       	rjmp	.+0      	; 0xaca <main+0x20>
 aca:	00 00       	nop
	_delay_ms(50);
	sei();		//set external interrupt
 acc:	78 94       	sei
}

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
	Lcd8_Cmd(0x80 + b);
 ace:	80 e8       	ldi	r24, 0x80	; 128
 ad0:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Cmd>
	while(1) {
		Lcd8_Set_Cursor(1,0);	//set location of LCD cursor
		Lcd8_Write_String("Distance:");		//write this message to LCD screen
 ad4:	82 e4       	ldi	r24, 0x42	; 66
 ad6:	91 e0       	ldi	r25, 0x01	; 1
 ad8:	0e 94 c9 02 	call	0x592	; 0x592 <Lcd8_Write_String>
		angleLoop();	//go to angleLoop
 adc:	0e 94 74 04 	call	0x8e8	; 0x8e8 <angleLoop>
 ae0:	f6 cf       	rjmp	.-20     	; 0xace <main+0x24>

00000ae2 <__vector_1>:
	}
	return 0;
}

ISR(INT0_vect)
{
 ae2:	1f 92       	push	r1
 ae4:	0f 92       	push	r0
 ae6:	0f b6       	in	r0, 0x3f	; 63
 ae8:	0f 92       	push	r0
 aea:	11 24       	eor	r1, r1
 aec:	8f 93       	push	r24
 aee:	9f 93       	push	r25
 af0:	ef 93       	push	r30
 af2:	ff 93       	push	r31
	//if the flag is 0, start timer2 with 1024 pre-scaler
	if(echoFlag == 0) {
 af4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <echoFlag>
 af8:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <echoFlag+0x1>
 afc:	89 2b       	or	r24, r25
 afe:	61 f4       	brne	.+24     	; 0xb18 <__vector_1+0x36>
		TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20);	//1024 pre-scaler
 b00:	e1 eb       	ldi	r30, 0xB1	; 177
 b02:	f0 e0       	ldi	r31, 0x00	; 0
 b04:	80 81       	ld	r24, Z
 b06:	87 60       	ori	r24, 0x07	; 7
 b08:	80 83       	st	Z, r24
		echoFlag = 1;	//set flag to 1
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <echoFlag+0x1>
 b12:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <echoFlag>
 b16:	0f c0       	rjmp	.+30     	; 0xb36 <__vector_1+0x54>
	}
	else {
		TCCR2B = 0;	//stop timer
 b18:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		pulseEnd = TCNT2;	//pulse takes values of counter
 b1c:	e2 eb       	ldi	r30, 0xB2	; 178
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	80 81       	ld	r24, Z
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <pulseEnd+0x1>
 b28:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <pulseEnd>
		TCNT2 = 0;		//reset counter
 b2c:	10 82       	st	Z, r1
		echoFlag = 0;		//reset flag
 b2e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <echoFlag+0x1>
 b32:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <echoFlag>
	}
}
 b36:	ff 91       	pop	r31
 b38:	ef 91       	pop	r30
 b3a:	9f 91       	pop	r25
 b3c:	8f 91       	pop	r24
 b3e:	0f 90       	pop	r0
 b40:	0f be       	out	0x3f, r0	; 63
 b42:	0f 90       	pop	r0
 b44:	1f 90       	pop	r1
 b46:	18 95       	reti

00000b48 <__vector_9>:

//this interrupt will reset Timer 2 if overflow occurs.
//However, because the timer is 8 bit, it is limited to showing only values up to 275cm.
//Therefore, the Timer will never count beyond the range of the sensor, 400cm.
//Thus, overflow will never occur. This is simply here to increase robustness of the system.
ISR(TIMER2_OVF_vect){
 b48:	1f 92       	push	r1
 b4a:	0f 92       	push	r0
 b4c:	0f b6       	in	r0, 0x3f	; 63
 b4e:	0f 92       	push	r0
 b50:	11 24       	eor	r1, r1
	TCCR2B = 0;	//stop timer
 b52:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TCNT2 = 0;	//reset counter
 b56:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	echoFlag = 0;	//reset flag
 b5a:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <echoFlag+0x1>
 b5e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <echoFlag>
 b62:	0f 90       	pop	r0
 b64:	0f be       	out	0x3f, r0	; 63
 b66:	0f 90       	pop	r0
 b68:	1f 90       	pop	r1
 b6a:	18 95       	reti

00000b6c <__itoa_ncheck>:
 b6c:	bb 27       	eor	r27, r27
 b6e:	4a 30       	cpi	r20, 0x0A	; 10
 b70:	31 f4       	brne	.+12     	; 0xb7e <__itoa_ncheck+0x12>
 b72:	99 23       	and	r25, r25
 b74:	22 f4       	brpl	.+8      	; 0xb7e <__itoa_ncheck+0x12>
 b76:	bd e2       	ldi	r27, 0x2D	; 45
 b78:	90 95       	com	r25
 b7a:	81 95       	neg	r24
 b7c:	9f 4f       	sbci	r25, 0xFF	; 255
 b7e:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__utoa_common>

00000b82 <__utoa_ncheck>:
 b82:	bb 27       	eor	r27, r27

00000b84 <__utoa_common>:
 b84:	fb 01       	movw	r30, r22
 b86:	55 27       	eor	r21, r21
 b88:	aa 27       	eor	r26, r26
 b8a:	88 0f       	add	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	aa 1f       	adc	r26, r26
 b90:	a4 17       	cp	r26, r20
 b92:	10 f0       	brcs	.+4      	; 0xb98 <__utoa_common+0x14>
 b94:	a4 1b       	sub	r26, r20
 b96:	83 95       	inc	r24
 b98:	50 51       	subi	r21, 0x10	; 16
 b9a:	b9 f7       	brne	.-18     	; 0xb8a <__utoa_common+0x6>
 b9c:	a0 5d       	subi	r26, 0xD0	; 208
 b9e:	aa 33       	cpi	r26, 0x3A	; 58
 ba0:	08 f0       	brcs	.+2      	; 0xba4 <__utoa_common+0x20>
 ba2:	a9 5d       	subi	r26, 0xD9	; 217
 ba4:	a1 93       	st	Z+, r26
 ba6:	00 97       	sbiw	r24, 0x00	; 0
 ba8:	79 f7       	brne	.-34     	; 0xb88 <__utoa_common+0x4>
 baa:	b1 11       	cpse	r27, r1
 bac:	b1 93       	st	Z+, r27
 bae:	11 92       	st	Z+, r1
 bb0:	cb 01       	movw	r24, r22
 bb2:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <strrev>

00000bb6 <strrev>:
 bb6:	dc 01       	movw	r26, r24
 bb8:	fc 01       	movw	r30, r24
 bba:	67 2f       	mov	r22, r23
 bbc:	71 91       	ld	r23, Z+
 bbe:	77 23       	and	r23, r23
 bc0:	e1 f7       	brne	.-8      	; 0xbba <strrev+0x4>
 bc2:	32 97       	sbiw	r30, 0x02	; 2
 bc4:	04 c0       	rjmp	.+8      	; 0xbce <strrev+0x18>
 bc6:	7c 91       	ld	r23, X
 bc8:	6d 93       	st	X+, r22
 bca:	70 83       	st	Z, r23
 bcc:	62 91       	ld	r22, -Z
 bce:	ae 17       	cp	r26, r30
 bd0:	bf 07       	cpc	r27, r31
 bd2:	c8 f3       	brcs	.-14     	; 0xbc6 <strrev+0x10>
 bd4:	08 95       	ret

00000bd6 <_exit>:
 bd6:	f8 94       	cli

00000bd8 <__stop_program>:
 bd8:	ff cf       	rjmp	.-2      	; 0xbd8 <__stop_program>
