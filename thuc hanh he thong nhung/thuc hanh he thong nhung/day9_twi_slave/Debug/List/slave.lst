
AVRASM ver. 2.1.30  D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm Thu May 25 10:47:37 2023

D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1420): warning: Register r3 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1421): warning: Register r4 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1422): warning: Register r5 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1423): warning: Register r6 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1424): warning: Register r7 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1425): warning: Register r8 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1426): warning: Register r9 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1427): warning: Register r10 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1428): warning: Register r11 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1429): warning: Register r12 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1430): warning: Register r13 already defined by the .DEF directive
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1431): warning: Register r14 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R3
                 	.DEF _i_msb=R4
                 	.DEF _UART_Rx_Index=R5
                 	.DEF _UART_Rx_Index_msb=R6
                 	.DEF _UART_Data_In=R7
                 	.DEF _UART_Data_In_msb=R8
                 	.DEF _TWI_Rx_Index=R9
                 	.DEF _TWI_Rx_Index_msb=R10
                 	.DEF _TWI_Tx_Index=R11
                 	.DEF _TWI_Tx_Index_msb=R12
                 	.DEF _TWI_Data_In=R13
                 	.DEF _TWI_Data_In_msb=R14
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00cc 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0163 	JMP  _usart_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0185 	JMP  _TWI_isr
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0000      	.DB  0x0,0x0
                 
                 _0x30:
000039 0201
00003a 0403      	.DB  0x1,0x2,0x3,0x4
                 _0x0:
00003b 7453
00003c 7261
00003d 2074
00003e 6573      	.DB  0x53,0x74,0x61,0x72,0x74,0x20,0x73,0x65
00003f 746e
000040 2e2e
000041 0a2e
000042 5300      	.DB  0x6E,0x74,0x2E,0x2E,0x2E,0xA,0x0,0x53
000043 6174
000044 7574
000045 2073
000046 6f43      	.DB  0x74,0x61,0x74,0x75,0x73,0x20,0x43,0x6F
000047 6564
000048 203a
000049 5300
00004a 414c      	.DB  0x64,0x65,0x3A,0x20,0x0,0x53,0x4C,0x41
00004b 2b20
00004c 7220
00004d 2077
00004e 6573      	.DB  0x20,0x2B,0x20,0x72,0x77,0x20,0x73,0x65
00004f 746e
000050 2e20
000051 2e2e
000052 000a      	.DB  0x6E,0x74,0x20,0x2E,0x2E,0x2E,0xA,0x0
000053 7942
000054 6574
000055 7320
000056 6e65      	.DB  0x42,0x79,0x74,0x65,0x20,0x73,0x65,0x6E
000057 2e74
000058 2e2e
000059 000a
00005a 774f      	.DB  0x74,0x2E,0x2E,0x2E,0xA,0x0,0x4F,0x77
00005b 206e
00005c 6461
00005d 7264
00005e 7365      	.DB  0x6E,0x20,0x61,0x64,0x64,0x72,0x65,0x73
00005f 2073
000060 616d
000061 6374
000062 2068      	.DB  0x73,0x20,0x6D,0x61,0x74,0x63,0x68,0x20
000063 202b
000064 2057
000065 000a
000066 6552      	.DB  0x2B,0x20,0x57,0x20,0xA,0x0,0x52,0x65
000067 6563
000068 7669
000069 2065
00006a 2061      	.DB  0x63,0x65,0x69,0x76,0x65,0x20,0x61,0x20
00006b 7962
00006c 6574
00006d 202c
00006e 6573      	.DB  0x62,0x79,0x74,0x65,0x2C,0x20,0x73,0x65
00006f 746e
000070 4120
000071 4b43
000072 0a20      	.DB  0x6E,0x74,0x20,0x41,0x43,0x4B,0x20,0xA
000073 5200
000074 6365
000075 6965
000076 6576      	.DB  0x0,0x52,0x65,0x63,0x65,0x69,0x76,0x65
000077 6120
000078 6220
000079 7479
00007a 2c65      	.DB  0x20,0x61,0x20,0x62,0x79,0x74,0x65,0x2C
00007b 7320
00007c 6e65
00007d 2074
00007e 414e      	.DB  0x20,0x73,0x65,0x6E,0x74,0x20,0x4E,0x41
00007f 4b43
000080 0a20
000081 5200
000082 6365      	.DB  0x43,0x4B,0x20,0xA,0x0,0x52,0x65,0x63
000083 6965
000084 6576
000085 5320
000086 6f74      	.DB  0x65,0x69,0x76,0x65,0x20,0x53,0x74,0x6F
000087 2070
000088 6f63
000089 646e
00008a 7469      	.DB  0x70,0x20,0x63,0x6F,0x6E,0x64,0x69,0x74
00008b 6f69
00008c 206e
00008d 000a
00008e 6144      	.DB  0x69,0x6F,0x6E,0x20,0xA,0x0,0x44,0x61
00008f 6174
000090 7220
000091 6365
000092 6965      	.DB  0x74,0x61,0x20,0x72,0x65,0x63,0x65,0x69
000093 6576
000094 2064
000095 7266
000096 6d6f      	.DB  0x76,0x65,0x64,0x20,0x66,0x72,0x6F,0x6D
000097 5420
000098 4957
000099 203a
D:\thuc hanh he thong nhung\day9_twi_slave\Debug\List\slave.asm(1502): warning: .cseg .db misalignment - padding zero byte
00009a 0000      	.DB  0x20,0x54,0x57,0x49,0x3A,0x20,0x0
                 
                 __GLOBAL_INI_TBL:
00009b 000a      	.DW  0x0A
00009c 0005      	.DW  0x05
00009d 0068      	.DW  __REG_VARS*2
                 
00009e 000f      	.DW  0x0F
00009f 0300      	.DW  _0x13
0000a0 0076      	.DW  _0x0*2
                 
0000a1 000e      	.DW  0x0E
0000a2 030f      	.DW  _0x13+15
0000a3 0085      	.DW  _0x0*2+15
                 
0000a4 0002      	.DW  0x02
0000a5 031d      	.DW  _0x13+29
0000a6 0083      	.DW  _0x0*2+13
                 
0000a7 0013      	.DW  0x13
0000a8 031f      	.DW  _0x17
0000a9 0093      	.DW  _0x0*2+29
                 
0000aa 000e      	.DW  0x0E
0000ab 0332      	.DW  _0x17+19
0000ac 0085      	.DW  _0x0*2+15
                 
0000ad 0002      	.DW  0x02
0000ae 0340      	.DW  _0x17+33
0000af 0083      	.DW  _0x0*2+13
                 
0000b0 000e      	.DW  0x0E
0000b1 0342      	.DW  _0x1B
0000b2 00a6      	.DW  _0x0*2+48
                 
0000b3 000e      	.DW  0x0E
0000b4 0350      	.DW  _0x1B+14
0000b5 0085      	.DW  _0x0*2+15
                 
0000b6 0002      	.DW  0x02
0000b7 035e      	.DW  _0x1B+28
0000b8 0083      	.DW  _0x0*2+13
                 
0000b9 0018      	.DW  0x18
0000ba 0360      	.DW  _0x36
0000bb 00b4      	.DW  _0x0*2+62
                 
0000bc 001b      	.DW  0x1B
0000bd 0378      	.DW  _0x36+24
0000be 00cc      	.DW  _0x0*2+86
                 
0000bf 001c      	.DW  0x1C
0000c0 0393      	.DW  _0x36+51
0000c1 00e7      	.DW  _0x0*2+113
                 
0000c2 0019      	.DW  0x19
0000c3 03af      	.DW  _0x36+79
0000c4 0103      	.DW  _0x0*2+141
                 
0000c5 0019      	.DW  0x19
0000c6 03c8      	.DW  _0x4F
0000c7 011c      	.DW  _0x0*2+166
                 
0000c8 0002      	.DW  0x02
0000c9 03e1      	.DW  _0x4F+25
0000ca 0083      	.DW  _0x0*2+13
                 
                 _0xFFFFFFFF:
0000cb 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000cc 94f8      	CLI
0000cd 27ee      	CLR  R30
0000ce bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000cf e0f1      	LDI  R31,1
0000d0 bff5      	OUT  MCUCR,R31
0000d1 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000d2 e08d      	LDI  R24,(14-2)+1
0000d3 e0a2      	LDI  R26,2
0000d4 27bb      	CLR  R27
                 __CLEAR_REG:
0000d5 93ed      	ST   X+,R30
0000d6 958a      	DEC  R24
0000d7 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000d8 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000d9 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000da e0a0      	LDI  R26,LOW(__SRAM_START)
0000db e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000dc 93ed      	ST   X+,R30
0000dd 9701      	SBIW R24,1
0000de f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000df e3e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000e0 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000e1 9185      	LPM  R24,Z+
0000e2 9195      	LPM  R25,Z+
0000e3 9700      	SBIW R24,0
0000e4 f061      	BREQ __GLOBAL_INI_END
0000e5 91a5      	LPM  R26,Z+
0000e6 91b5      	LPM  R27,Z+
0000e7 9005      	LPM  R0,Z+
0000e8 9015      	LPM  R1,Z+
0000e9 01bf      	MOVW R22,R30
0000ea 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000eb 9005      	LPM  R0,Z+
0000ec 920d      	ST   X+,R0
0000ed 9701      	SBIW R24,1
0000ee f7e1      	BRNE __GLOBAL_INI_LOOP
0000ef 01fb      	MOVW R30,R22
0000f0 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000f1 e0e0      	LDI  R30,__GPIOR0_INIT
0000f2 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000f3 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000f4 bfed      	OUT  SPL,R30
0000f5 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000f6 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000f7 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000f8 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000f9 940c 0213 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _uart_init:
                 ; .FSTART _uart_init
0000fb 93ba      	ST   -Y,R27
0000fc 93aa      	ST   -Y,R26
0000fd 931a      	ST   -Y,R17
0000fe 930a      	ST   -Y,R16
                 ;	BAUDRATE -> Y+2
                 ;	n -> R16,R17
0000ff 81ea      	LDD  R30,Y+2
000100 81fb      	LDD  R31,Y+2+1
000101 2766      	CLR  R22
000102 2777      	CLR  R23
000103 d13a      	RCALL SUBOPT_0x0
000104 01df      	MOVW R26,R30
000105 01cb      	MOVW R24,R22
                +
000106 e1e0     +LDI R30 , LOW ( 0x10 )
000107 e0f0     +LDI R31 , HIGH ( 0x10 )
000108 e060     +LDI R22 , BYTE3 ( 0x10 )
000109 e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
00010a d19e      	RCALL __DIVD21
00010b 9731      	SBIW R30,1
00010c 018f      	MOVW R16,R30
00010d 9310 00c5 	STS  197,R17
00010f 9300 00c4 	STS  196,R16
000111 e0e6      	LDI  R30,LOW(6)
000112 93e0 00c2 	STS  194,R30
000114 e9e8      	LDI  R30,LOW(152)
000115 93e0 00c1 	STS  193,R30
000117 9478      	SEI
000118 8119      	LDD  R17,Y+1
000119 8108      	LDD  R16,Y+0
00011a 9624      	ADIW R28,4
00011b 9508      	RET
                 ; .FEND
                 _uart_putchar:
                 ; .FSTART _uart_putchar
00011c 931a      	ST   -Y,R17
00011d 2f1a      	MOV  R17,R26
                 ;	data -> R17
                 _0x3:
00011e 91e0 00c0 	LDS  R30,192
000120 72e0      	ANDI R30,LOW(0x20)
000121 f3e1      	BREQ _0x3
000122 9310 00c6 	STS  198,R17
000124 9119      	LD   R17,Y+
000125 9508      	RET
                 ; .FEND
                 _uart_putstring:
                 ; .FSTART _uart_putstring
000126 931a      	ST   -Y,R17
000127 930a      	ST   -Y,R16
000128 018d      	MOVW R16,R26
                 ;	*str -> R16,R17
                 _0x6:
000129 01d8      	MOVW R26,R16
00012a 91ec      	LD   R30,X
00012b 30e0      	CPI  R30,0
00012c f059      	BREQ _0x8
00012d 91ac      	LD   R26,X
00012e dfed      	RCALL _uart_putchar
00012f 01d8      	MOVW R26,R16
000130 91ac      	LD   R26,X
000131 30aa      	CPI  R26,LOW(0xA)
000132 f411      	BRNE _0x9
000133 e0ad      	LDI  R26,LOW(13)
000134 dfe7      	RCALL _uart_putchar
                 _0x9:
                +
000135 5f0f     +SUBI R16 , LOW ( - 1 )
000136 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000137 cff1      	RJMP _0x6
                 _0x8:
000138 9109      	LD   R16,Y+
000139 9119      	LD   R17,Y+
00013a 9508      	RET
                 ; .FEND
                 ;	value -> Y+14
                 ;	buf -> Y+6
                 ;	index -> R16,R17
                 ;	i -> R18,R19
                 ;	j -> R20,R21
                 _TWI_Init:
                 ; .FSTART _TWI_Init
00013b d12f      	RCALL __SAVELOCR4
00013c 2f1a      	MOV  R17,R26
00013d 810c      	LDD  R16,Y+4
00013e 813d      	LDD  R19,Y+5
                 ;	sla -> R19
                 ;	gcall -> R16
                 ;	sclock -> R17
00013f 2fe3      	MOV  R30,R19
000140 0fee      	LSL  R30
000141 0fe0      	ADD  R30,R16
000142 93e0 00ba 	STS  186,R30
000144 91e0 00b9 	LDS  R30,185
000146 7fec      	ANDI R30,LOW(0xFC)
000147 93e0 00b9 	STS  185,R30
000149 2fe1      	MOV  R30,R17
00014a e0f0      	LDI  R31,0
                +
00014b 2f6f     +MOV R22 , R31
00014c 0f66     +ADD R22 , R22
00014d 0b66     +SBC R22 , R22
00014e 2f76     +MOV R23 , R22
                 	__CWD1
00014f d0ee      	RCALL SUBOPT_0x0
                +
000150 51e0     +SUBI R30 , LOW ( 16 )
000151 40f0     +SBCI R31 , HIGH ( 16 )
000152 4060     +SBCI R22 , BYTE3 ( 16 )
000153 4070     +SBCI R23 , BYTE4 ( 16 )
                 	__SUBD1N 16
000154 01df      	MOVW R26,R30
000155 01cb      	MOVW R24,R22
                +
000156 e0e2     +LDI R30 , LOW ( 0x2 )
000157 e0f0     +LDI R31 , HIGH ( 0x2 )
000158 e060     +LDI R22 , BYTE3 ( 0x2 )
000159 e070     +LDI R23 , BYTE4 ( 0x2 )
                 	__GETD1N 0x2
00015a d14e      	RCALL __DIVD21
00015b 93e0 00b8 	STS  184,R30
00015d e4e5      	LDI  R30,LOW(69)
00015e 93e0 00bc 	STS  188,R30
000160 d10f      	RCALL __LOADLOCR4
000161 9626      	ADIW R28,6
000162 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x13:
000300           	.BYTE 0x1F
                 
                 	.CSEG
                 ;	add -> R16
                 ;	rw -> R17
                 
                 	.DSEG
                 _0x17:
00031f           	.BYTE 0x23
                 
                 	.CSEG
                 ;	b -> R17
                 
                 	.DSEG
                 _0x1B:
000342           	.BYTE 0x1E
                 
                 	.CSEG
                 ;	*arr -> R18,R19
                 ;	length -> R16,R17
                 ;	sla -> R21
                 ;	*arr -> R18,R19
                 ;	length -> R16,R17
                 ;	sla -> R21
                 ;	*arr -> R18,R19
                 ;	length -> R16,R17
                 
                 	.DSEG
                 ;interrupt [19] void usart_rx_isr(void) {
                 ; 0000 001C interrupt [19] void usart_rx_isr(void) {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000163 93aa      	ST   -Y,R26
000164 93ba      	ST   -Y,R27
000165 93ea      	ST   -Y,R30
000166 93fa      	ST   -Y,R31
000167 b7ef      	IN   R30,SREG
000168 93ea      	ST   -Y,R30
                 ; 0000 001D UART_Data_In = 1;
000169 e0e1      	LDI  R30,LOW(1)
00016a e0f0      	LDI  R31,HIGH(1)
                +
00016b 2e7e     +MOV R7 , R30
00016c 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 001E if (UART_Rx_Index <50){
00016d e3e2      	LDI  R30,LOW(50)
00016e e0f0      	LDI  R31,HIGH(50)
00016f 165e      	CP   R5,R30
000170 066f      	CPC  R6,R31
000171 f464      	BRGE _0x31
                 ; 0000 001F UART_Rx_Buf[UART_Rx_Index++] = UDR0;
                +
000172 2de5     +MOV R30 , R5
000173 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
000174 9631      	ADIW R30,1
                +
000175 2e5e     +MOV R5 , R30
000176 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
000177 9731      	SBIW R30,1
000178 5be9      	SUBI R30,LOW(-_UART_Rx_Buf)
000179 4ffb      	SBCI R31,HIGH(-_UART_Rx_Buf)
00017a 01df      	MOVW R26,R30
00017b 91e0 00c6 	LDS  R30,198
00017d 93ec      	ST   X,R30
                 ; 0000 0020 }
                 ; 0000 0021 }
                 _0x31:
00017e 91e9      	LD   R30,Y+
00017f bfef      	OUT  SREG,R30
000180 91f9      	LD   R31,Y+
000181 91e9      	LD   R30,Y+
000182 91b9      	LD   R27,Y+
000183 91a9      	LD   R26,Y+
000184 9518      	RETI
                 ; .FEND
                 ;interrupt [25] void TWI_isr(void){
                 ; 0000 0023 interrupt [25] void TWI_isr(void){
                 _TWI_isr:
                 ; .FSTART _TWI_isr
000185 920a      	ST   -Y,R0
000186 921a      	ST   -Y,R1
000187 92fa      	ST   -Y,R15
000188 936a      	ST   -Y,R22
000189 937a      	ST   -Y,R23
00018a 938a      	ST   -Y,R24
00018b 939a      	ST   -Y,R25
00018c 93aa      	ST   -Y,R26
00018d 93ba      	ST   -Y,R27
00018e 93ea      	ST   -Y,R30
00018f 93fa      	ST   -Y,R31
000190 b7ef      	IN   R30,SREG
000191 93ea      	ST   -Y,R30
                 ; 0000 0024 Status_Code = TWSR;
000192 91e0 00b9 	LDS  R30,185
000194 93e0 0479 	STS  _Status_Code,R30
                 ; 0000 0025 switch (Status_Code){
000196 e0f0      	LDI  R31,0
                 ; 0000 0026 ////////////////////////////////////////////////////
                 ; 0000 0027 ///////////// Slave Receive Mode ///////////////////
                 ; 0000 0028 case 0x60:                   //Own Address match + W, sent ACK
000197 36e0      	CPI  R30,LOW(0x60)
000198 e0a0      	LDI  R26,HIGH(0x60)
000199 07fa      	CPC  R31,R26
00019a f431      	BRNE _0x35
                 ; 0000 0029 uart_putstring("Own address match + W \n");
                +
00019b e6a0     +LDI R26 , LOW ( _0x36 + ( 0 ) )
00019c e0b3     +LDI R27 , HIGH ( _0x36 + ( 0 ) )
                 	__POINTW2MN _0x36,0
00019d df88      	RCALL _uart_putstring
                 ; 0000 002A TWI_Rx_Index = 0;
00019e 2499      	CLR  R9
00019f 24aa      	CLR  R10
                 ; 0000 002B TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0001a0 c05f      	RJMP _0x54
                 ; 0000 002C break;
                 ; 0000 002D case 0x80:                  //Received a byte, sent ACK
                 _0x35:
0001a1 38e0      	CPI  R30,LOW(0x80)
0001a2 e0a0      	LDI  R26,HIGH(0x80)
0001a3 07fa      	CPC  R31,R26
0001a4 f449      	BRNE _0x37
                 ; 0000 002E 
                 ; 0000 002F uart_putstring("Receive a byte, sent ACK \n");
                +
0001a5 e7a8     +LDI R26 , LOW ( _0x36 + ( 24 ) )
0001a6 e0b3     +LDI R27 , HIGH ( _0x36 + ( 24 ) )
                 	__POINTW2MN _0x36,24
0001a7 df7e      	RCALL _uart_putstring
                 ; 0000 0030 if (TWI_Rx_Index<49){
0001a8 d09b      	RCALL SUBOPT_0x1
0001a9 f414      	BRGE _0x38
                 ; 0000 0031 TWI_Rx_Buf[TWI_Rx_Index++] = TWDR;
0001aa d09e      	RCALL SUBOPT_0x2
                 ; 0000 0032 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0001ab c054      	RJMP _0x54
                 ; 0000 0033 break;
                 ; 0000 0034 }
                 ; 0000 0035 else {                  //Receive last byte
                 _0x38:
                 ; 0000 0036 TWI_Rx_Buf[TWI_Rx_Index] = TWDR;
0001ac d0a9      	RCALL SUBOPT_0x3
                 ; 0000 0037 TWCR = 0b10000101;     //Clear TWINT, clear TWEA, send NACK
0001ad c055      	RJMP _0x55
                 ; 0000 0038 break;
                 ; 0000 0039 }
                 ; 0000 003A case 0x88:                  //Received a byte, sent NACK
                 _0x37:
0001ae 38e8      	CPI  R30,LOW(0x88)
0001af e0a0      	LDI  R26,HIGH(0x88)
0001b0 07fa      	CPC  R31,R26
0001b1 f409      	BRNE _0x3B
                 ; 0000 003B TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0001b2 c04d      	RJMP _0x54
                 ; 0000 003C break;
                 ; 0000 003D // For General Call
                 ; 0000 003E case 0x70:                  //General Call match + W, send ACK
                 _0x3B:
0001b3 37e0      	CPI  R30,LOW(0x70)
0001b4 e0a0      	LDI  R26,HIGH(0x70)
0001b5 07fa      	CPC  R31,R26
0001b6 f419      	BRNE _0x3C
                 ; 0000 003F TWI_Rx_Index = 0;
0001b7 2499      	CLR  R9
0001b8 24aa      	CLR  R10
                 ; 0000 0040 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0001b9 c046      	RJMP _0x54
                 ; 0000 0041 break;
                 ; 0000 0042 case 0x90:                  //Received a byte, sent ACK
                 _0x3C:
0001ba 39e0      	CPI  R30,LOW(0x90)
0001bb e0a0      	LDI  R26,HIGH(0x90)
0001bc 07fa      	CPC  R31,R26
0001bd f431      	BRNE _0x3D
                 ; 0000 0043 
                 ; 0000 0044 if (TWI_Rx_Index<49){
0001be d085      	RCALL SUBOPT_0x1
0001bf f414      	BRGE _0x3E
                 ; 0000 0045 TWI_Rx_Buf[TWI_Rx_Index++] = TWDR;
0001c0 d088      	RCALL SUBOPT_0x2
                 ; 0000 0046 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0001c1 c03e      	RJMP _0x54
                 ; 0000 0047 break;
                 ; 0000 0048 }
                 ; 0000 0049 else {                  //Receive last byte
                 _0x3E:
                 ; 0000 004A TWI_Rx_Buf[TWI_Rx_Index] = TWDR;
0001c2 d093      	RCALL SUBOPT_0x3
                 ; 0000 004B TWCR = 0b10000101;     //Clear TWINT, clear TWEA, send NACK
0001c3 c03f      	RJMP _0x55
                 ; 0000 004C break;
                 ; 0000 004D }
                 ; 0000 004E case 0x98:                  //Received a byte, sent NACK
                 _0x3D:
0001c4 39e8      	CPI  R30,LOW(0x98)
0001c5 e0a0      	LDI  R26,HIGH(0x98)
0001c6 07fa      	CPC  R31,R26
0001c7 f421      	BRNE _0x41
                 ; 0000 004F uart_putstring("Receive a byte, sent NACK \n");
                +
0001c8 e9a3     +LDI R26 , LOW ( _0x36 + ( 51 ) )
0001c9 e0b3     +LDI R27 , HIGH ( _0x36 + ( 51 ) )
                 	__POINTW2MN _0x36,51
0001ca df5b      	RCALL _uart_putstring
                 ; 0000 0050 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0001cb c034      	RJMP _0x54
                 ; 0000 0051 break;
                 ; 0000 0052 case 0xA0:                  //Received Stop condition or Restart
                 _0x41:
0001cc 3ae0      	CPI  R30,LOW(0xA0)
0001cd e0a0      	LDI  R26,HIGH(0xA0)
0001ce 07fa      	CPC  R31,R26
0001cf f441      	BRNE _0x42
                 ; 0000 0053 uart_putstring("Receive Stop condition \n");
                +
0001d0 eaaf     +LDI R26 , LOW ( _0x36 + ( 79 ) )
0001d1 e0b3     +LDI R27 , HIGH ( _0x36 + ( 79 ) )
                 	__POINTW2MN _0x36,79
0001d2 df53      	RCALL _uart_putstring
                 ; 0000 0054 TWI_Data_In = 1;
0001d3 e0e1      	LDI  R30,LOW(1)
0001d4 e0f0      	LDI  R31,HIGH(1)
                +
0001d5 2ede     +MOV R13 , R30
0001d6 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 0055 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0001d7 c028      	RJMP _0x54
                 ; 0000 0056 break;
                 ; 0000 0057 //////////////////////////////////////////////////////
                 ; 0000 0058 ///////////// Slave Transmit Mode ///////////////////
                 ; 0000 0059 case 0xA8:                  //Own Address match + R,  sent ACK
                 _0x42:
0001d8 3ae8      	CPI  R30,LOW(0xA8)
0001d9 e0a0      	LDI  R26,HIGH(0xA8)
0001da 07fa      	CPC  R31,R26
0001db f411      	BRNE _0x43
                 ; 0000 005A TWDR = TWI_Tx_Buf[TWI_Tx_Index++];
0001dc d082      	RCALL SUBOPT_0x4
                 ; 0000 005B TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0001dd c022      	RJMP _0x54
                 ; 0000 005C break;
                 ; 0000 005D case 0xB8:                  //Sent data, received ACK
                 _0x43:
0001de 3be8      	CPI  R30,LOW(0xB8)
0001df e0a0      	LDI  R26,HIGH(0xB8)
0001e0 07fa      	CPC  R31,R26
0001e1 f481      	BRNE _0x44
                 ; 0000 005E if (TWI_Tx_Index < 49){
0001e2 e3e1      	LDI  R30,LOW(49)
0001e3 e0f0      	LDI  R31,HIGH(49)
0001e4 16be      	CP   R11,R30
0001e5 06cf      	CPC  R12,R31
0001e6 f414      	BRGE _0x45
                 ; 0000 005F TWDR = TWI_Tx_Buf[TWI_Tx_Index++];
0001e7 d077      	RCALL SUBOPT_0x4
                 ; 0000 0060 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0001e8 c017      	RJMP _0x54
                 ; 0000 0061 break;
                 ; 0000 0062 }
                 ; 0000 0063 else {
                 _0x45:
                 ; 0000 0064 TWDR = TWI_Tx_Buf[TWI_Tx_Index];    //send last byte
0001e9 e1a5      	LDI  R26,LOW(_TWI_Tx_Buf)
0001ea e0b4      	LDI  R27,HIGH(_TWI_Tx_Buf)
0001eb 0dab      	ADD  R26,R11
0001ec 1dbc      	ADC  R27,R12
0001ed 91ec      	LD   R30,X
0001ee 93e0 00bb 	STS  187,R30
                 ; 0000 0065 TWCR = 0b10000101;                  //Clear TWINT, Clear TWEA
0001f0 e8e5      	LDI  R30,LOW(133)
0001f1 c011      	RJMP _0x55
                 ; 0000 0066 break;
                 ; 0000 0067 }
                 ; 0000 0068 case 0xB0:           //Lost arbitration, own address match+R, sent ACK
                 _0x44:
0001f2 3be0      	CPI  R30,LOW(0xB0)
0001f3 e0a0      	LDI  R26,HIGH(0xB0)
0001f4 07fa      	CPC  R31,R26
0001f5 f411      	BRNE _0x48
                 ; 0000 0069 TWDR = TWI_Tx_Buf[TWI_Tx_Index++];
0001f6 d068      	RCALL SUBOPT_0x4
                 ; 0000 006A TWCR |= 0b11000000;     //Clear TWINT, set TWEA
0001f7 c008      	RJMP _0x54
                 ; 0000 006B break;
                 ; 0000 006C case 0xC0:                  //sent data byte, receive NACK
                 _0x48:
0001f8 3ce0      	CPI  R30,LOW(0xC0)
0001f9 e0a0      	LDI  R26,HIGH(0xC0)
0001fa 07fa      	CPC  R31,R26
0001fb f021      	BREQ _0x54
                 ; 0000 006D TWCR |= 0b11000000;     //Clear TWINT, set TWEA
                 ; 0000 006E break;
                 ; 0000 006F case 0xC8:                  //sent last data byte, receive ACK
0001fc 3ce8      	CPI  R30,LOW(0xC8)
0001fd e0a0      	LDI  R26,HIGH(0xC8)
0001fe 07fa      	CPC  R31,R26
0001ff f429      	BRNE _0x34
                 ; 0000 0070 TWCR |= 0b11000000;     //Clear TWINT, set TWEA
                 _0x54:
000200 91e0 00bc 	LDS  R30,188
000202 6ce0      	ORI  R30,LOW(0xC0)
                 _0x55:
000203 93e0 00bc 	STS  188,R30
                 ; 0000 0071 break;
                 ; 0000 0072 }
                 _0x34:
                 ; 0000 0073 }
000205 91e9      	LD   R30,Y+
000206 bfef      	OUT  SREG,R30
000207 91f9      	LD   R31,Y+
000208 91e9      	LD   R30,Y+
000209 91b9      	LD   R27,Y+
00020a 91a9      	LD   R26,Y+
00020b 9199      	LD   R25,Y+
00020c 9189      	LD   R24,Y+
00020d 9179      	LD   R23,Y+
00020e 9169      	LD   R22,Y+
00020f 90f9      	LD   R15,Y+
000210 9019      	LD   R1,Y+
000211 9009      	LD   R0,Y+
000212 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x36:
000360           	.BYTE 0x68
                 ;void main(void)
                 ; 0000 0077 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0078 uart_init(9600);
000213 e8a0      	LDI  R26,LOW(9600)
000214 e2b5      	LDI  R27,HIGH(9600)
000215 dee5      	RCALL _uart_init
                 ; 0000 0079 TWI_Init(own_address, 1, 100000);
000216 e0e2      	LDI  R30,LOW(2)
000217 93ea      	ST   -Y,R30
000218 e0e1      	LDI  R30,LOW(1)
000219 93ea      	ST   -Y,R30
00021a eaa0      	LDI  R26,LOW(160)
00021b df1f      	RCALL _TWI_Init
                 ; 0000 007A while (1)
                 _0x4B:
                 ; 0000 007B {
                 ; 0000 007C //If receive data from TWI, transfer them into UART
                 ; 0000 007D if (TWI_Data_In){
00021c 2c0d      	MOV  R0,R13
00021d 280e      	OR   R0,R14
00021e f0e9      	BREQ _0x4E
                 ; 0000 007E uart_putstring("Data received from TWI: ");
                +
00021f eca8     +LDI R26 , LOW ( _0x4F + ( 0 ) )
000220 e0b3     +LDI R27 , HIGH ( _0x4F + ( 0 ) )
                 	__POINTW2MN _0x4F,0
000221 df04      	RCALL _uart_putstring
                 ; 0000 007F uart_putstring(TWI_Rx_Buf);
000222 eea3      	LDI  R26,LOW(_TWI_Rx_Buf)
000223 e0b3      	LDI  R27,HIGH(_TWI_Rx_Buf)
000224 df01      	RCALL _uart_putstring
                 ; 0000 0080 uart_putstring("\n");
                +
000225 eea1     +LDI R26 , LOW ( _0x4F + ( 25 ) )
000226 e0b3     +LDI R27 , HIGH ( _0x4F + ( 25 ) )
                 	__POINTW2MN _0x4F,25
000227 defe      	RCALL _uart_putstring
                 ; 0000 0081 for (i = 0; i<TWI_Rx_Index;i++)
000228 2433      	CLR  R3
000229 2444      	CLR  R4
                 _0x51:
                +
00022a 1439     +CP R3 , R9
00022b 044a     +CPC R4 , R10
                 	__CPWRR 3,4,9,10
00022c f45c      	BRGE _0x52
                 ; 0000 0082 TWI_Tx_Buf[i] = 0;
00022d e1a5      	LDI  R26,LOW(_TWI_Tx_Buf)
00022e e0b4      	LDI  R27,HIGH(_TWI_Tx_Buf)
00022f 0da3      	ADD  R26,R3
000230 1db4      	ADC  R27,R4
000231 e0e0      	LDI  R30,LOW(0)
000232 93ec      	ST   X,R30
000233 e0e1      	LDI  R30,LOW(1)
000234 e0f0      	LDI  R31,HIGH(1)
                +
000235 0e3e     +ADD R3 , R30
000236 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
000237 cff2      	RJMP _0x51
                 _0x52:
                 ; 0000 0083 TWI_Rx_Index = 0;
000238 2499      	CLR  R9
000239 24aa      	CLR  R10
                 ; 0000 0084 TWI_Data_In = 0;
00023a 24dd      	CLR  R13
00023b 24ee      	CLR  R14
                 ; 0000 0085 }
                 ; 0000 0086 
                 ; 0000 0087 
                 ; 0000 0088 }
                 _0x4E:
00023c cfdf      	RJMP _0x4B
                 ; 0000 0089 }
                 _0x53:
00023d cfff      	RJMP _0x53
                 ; .FEND
                 
                 	.DSEG
                 _0x4F:
0003c8           	.BYTE 0x1B
                 
                 	.DSEG
                 _TWI_Rx_Buf:
0003e3           	.BYTE 0x32
                 _TWI_Tx_Buf:
000415           	.BYTE 0x32
                 _UART_Rx_Buf:
000447           	.BYTE 0x32
                 _Status_Code:
000479           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
                +
00023e e0a0     +LDI R26 , LOW ( 0xF42400 )
00023f e2b4     +LDI R27 , HIGH ( 0xF42400 )
000240 ef84     +LDI R24 , BYTE3 ( 0xF42400 )
000241 e090     +LDI R25 , BYTE4 ( 0xF42400 )
                 	__GETD2N 0xF42400
000242 d066      	RCALL __DIVD21
000243 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000244 e3e1      	LDI  R30,LOW(49)
000245 e0f0      	LDI  R31,HIGH(49)
000246 169e      	CP   R9,R30
000247 06af      	CPC  R10,R31
000248 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
                +
000249 2de9     +MOV R30 , R9
00024a 2dfa     +MOV R31 , R10
                 	__GETW1R 9,10
00024b 9631      	ADIW R30,1
                +
00024c 2e9e     +MOV R9 , R30
00024d 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
00024e 9731      	SBIW R30,1
00024f 51ed      	SUBI R30,LOW(-_TWI_Rx_Buf)
000250 4ffc      	SBCI R31,HIGH(-_TWI_Rx_Buf)
000251 01df      	MOVW R26,R30
000252 91e0 00bb 	LDS  R30,187
000254 93ec      	ST   X,R30
000255 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
                +
000256 2da9     +MOV R26 , R9
000257 2dba     +MOV R27 , R10
                 	__GETW2R 9,10
000258 51ad      	SUBI R26,LOW(-_TWI_Rx_Buf)
000259 4fbc      	SBCI R27,HIGH(-_TWI_Rx_Buf)
00025a 91e0 00bb 	LDS  R30,187
00025c 93ec      	ST   X,R30
00025d e8e5      	LDI  R30,LOW(133)
00025e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x4:
                +
00025f 2deb     +MOV R30 , R11
000260 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
000261 9631      	ADIW R30,1
                +
000262 2ebe     +MOV R11 , R30
000263 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
000264 9731      	SBIW R30,1
000265 5eeb      	SUBI R30,LOW(-_TWI_Tx_Buf)
000266 4ffb      	SBCI R31,HIGH(-_TWI_Tx_Buf)
000267 81e0      	LD   R30,Z
000268 93e0 00bb 	STS  187,R30
00026a 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
00026b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00026c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00026d 931a      	ST   -Y,R17
00026e 930a      	ST   -Y,R16
00026f 9508      	RET
                 
                 __LOADLOCR4:
000270 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000271 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000272 8119      	LDD  R17,Y+1
000273 8108      	LD   R16,Y
000274 9508      	RET
                 
                 __ANEGD1:
000275 95f0      	COM  R31
000276 9560      	COM  R22
000277 9570      	COM  R23
000278 95e1      	NEG  R30
000279 4fff      	SBCI R31,-1
00027a 4f6f      	SBCI R22,-1
00027b 4f7f      	SBCI R23,-1
00027c 9508      	RET
                 
                 __ANEGD2:
00027d 95b0      	COM  R27
00027e 9580      	COM  R24
00027f 9590      	COM  R25
000280 95a1      	NEG  R26
000281 4fbf      	SBCI R27,-1
000282 4f8f      	SBCI R24,-1
000283 4f9f      	SBCI R25,-1
000284 9508      	RET
                 
                 __DIVD21U:
000285 933f      	PUSH R19
000286 934f      	PUSH R20
000287 935f      	PUSH R21
000288 2400      	CLR  R0
000289 2411      	CLR  R1
00028a 01a0      	MOVW R20,R0
00028b e230      	LDI  R19,32
                 __DIVD21U1:
00028c 0faa      	LSL  R26
00028d 1fbb      	ROL  R27
00028e 1f88      	ROL  R24
00028f 1f99      	ROL  R25
000290 1c00      	ROL  R0
000291 1c11      	ROL  R1
000292 1f44      	ROL  R20
000293 1f55      	ROL  R21
000294 1a0e      	SUB  R0,R30
000295 0a1f      	SBC  R1,R31
000296 0b46      	SBC  R20,R22
000297 0b57      	SBC  R21,R23
000298 f428      	BRCC __DIVD21U2
000299 0e0e      	ADD  R0,R30
00029a 1e1f      	ADC  R1,R31
00029b 1f46      	ADC  R20,R22
00029c 1f57      	ADC  R21,R23
00029d c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00029e 60a1      	SBR  R26,1
                 __DIVD21U3:
00029f 953a      	DEC  R19
0002a0 f759      	BRNE __DIVD21U1
0002a1 01fd      	MOVW R30,R26
0002a2 01bc      	MOVW R22,R24
0002a3 01d0      	MOVW R26,R0
0002a4 01ca      	MOVW R24,R20
0002a5 915f      	POP  R21
0002a6 914f      	POP  R20
0002a7 913f      	POP  R19
0002a8 9508      	RET
                 
                 __DIVD21:
0002a9 d004      	RCALL __CHKSIGND
0002aa dfda      	RCALL __DIVD21U
0002ab f40e      	BRTC __DIVD211
0002ac dfc8      	RCALL __ANEGD1
                 __DIVD211:
0002ad 9508      	RET
                 
                 __CHKSIGND:
0002ae 94e8      	CLT
0002af ff77      	SBRS R23,7
0002b0 c002      	RJMP __CHKSD1
0002b1 dfc3      	RCALL __ANEGD1
0002b2 9468      	SET
                 __CHKSD1:
0002b3 ff97      	SBRS R25,7
0002b4 c004      	RJMP __CHKSD2
0002b5 dfc7      	RCALL __ANEGD2
0002b6 f800      	BLD  R0,0
0002b7 9403      	INC  R0
0002b8 fa00      	BST  R0,0
                 __CHKSD2:
0002b9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  17 r1 :   7 r2 :   0 r3 :   4 r4 :   4 r5 :   3 r6 :   3 r7 :   1 
r8 :   1 r9 :   8 r10:   8 r11:   4 r12:   4 r13:   3 r14:   3 r15:   2 
r16:  14 r17:  14 r18:   2 r19:   8 r20:   7 r21:   5 r22:  21 r23:  12 
r24:  17 r25:   9 r26:  66 r27:  26 r28:   3 r29:   1 r30: 122 r31:  51 
x  :  11 y  :  60 z  :   8 
Registers used: 34 out of 35 (97.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   6 
adiw  :   5 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   5 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  16 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  16 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   6 
cp    :   4 cpc   :  16 cpi   :  14 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  27 ld    :  26 ldd   :   9 ldi   :  83 
lds   :   7 lpm   :   7 lsl   :   2 lsr   :   0 mov   :  25 movw  :  18 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   1 out   :   8 pop   :   3 push  :   3 rcall :  32 ret   :  16 
reti  :   2 rjmp  :  21 rol   :   7 ror   :   0 sbc   :   4 sbci  :  14 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  37 std   :   0 sts   :  13 sub   :   1 subi  :   6 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 52 out of 116 (44.8%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000574   1092    304   1396   32768   4.3%
[.dseg] 0x000100 0x00047a      0    378    378    2048  18.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
